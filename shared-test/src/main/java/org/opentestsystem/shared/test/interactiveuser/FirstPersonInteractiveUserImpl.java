/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.interactiveuser;

import java.lang.Thread.State;
import java.util.Random;

import org.opentestsystem.shared.test.api.InteractionResponse;
import org.opentestsystem.shared.test.api.user.FirstPersonInteractiveUser;
import org.opentestsystem.shared.test.api.userstory.FirstPersonUserStory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;

public class FirstPersonInteractiveUserImpl<R extends InteractionResponse<R>,U extends FirstPersonInteractiveUser<R,U>>
extends BaseFirstPersonInteractiveUserImpl<R,U>
implements FirstPersonInteractiveUser<R,U>
{
  private final Object        _threadAssignmentLock = new Object ();
  private volatile Thread     _thread               = null;
  private volatile Throwable  _lastError            = null;
  private static final Logger _logger               = LoggerFactory.getLogger (FirstPersonInteractiveUserImpl.class);

  public final String         _name;
  private static int          _nextId               = 0;
  private static final Object _nameLock             = new Object ();

  protected Random             _random = new Random ();

  public FirstPersonInteractiveUserImpl () {
    this ("FirstPersonInteractiveUser");
  }

  public FirstPersonInteractiveUserImpl (String base) {
    super ();
    synchronized (_nameLock) {
      StringBuilder idBuilder = new StringBuilder (base);
      idBuilder.append (_nextId);
      _nextId++;
      _name = idBuilder.toString ();
    }
  }

  @Override
  public void doScriptSynchronous () throws Throwable {
    startScript ();
    join ();
    Throwable t = getError ();
    if (t != null) {
      throw t;
    }
  }

  @Override
  public void startScript () {
    synchronized (_threadAssignmentLock) {
      if (!isRunning ()) {

        // Instantiate the script
        final FirstPersonUserStory<U> script = getScriptInstance ();

        // Get a name for the thread
        StringBuilder threadNameBuilder = new StringBuilder (getName ());
        threadNameBuilder.append ('-').append (script.getScriptName ());
        _thread = new Thread (threadNameBuilder.toString ())
        {
          @Override
          public void run () {
            try {
              MDC.put ("interestingThreadId", "userStory");
              MDC.put ("thisUser", FirstPersonInteractiveUserImpl.this.getName ());
              MDC.put ("thisScript", script.getScriptName ());
              _logger.info ("Starting test thread for user {} script {}", FirstPersonInteractiveUserImpl.this.getName (), script.getScriptName ());
              _lastError = null;
              notifyScriptStart (this, script);
              script.run ();
              MDC.put ("close", "true");
              _logger.info ("Test thread completed for user {} script {}", FirstPersonInteractiveUserImpl.this.getName (), script.getScriptName ());
              notifyScriptComplete (this, script);
            }
            catch (Throwable t) {
              _lastError = t;
              MDC.put ("close", "true");
              _logger.error ("Raised error during asynchronous test execution (user {} script {})", FirstPersonInteractiveUserImpl.this.getName (), script.getScriptName (), _lastError);
              notifyScriptError (this, script, t);
            }
          }
        };
        _thread.setContextClassLoader ( Thread.currentThread ().getContextClassLoader ());
        _thread.start ();
      }
      else {
        throw new IllegalStateException ("Interactive user cannot start a second script thread while one is already running.");
      }
    }
  }

  @Override
  public boolean isRunning () {
    synchronized (_threadAssignmentLock) {
      if (_thread == null) {
        return false;
      }

      switch (_thread.getState ()) {
      case NEW:
      case TERMINATED:
        return false;

      case RUNNABLE:
      case BLOCKED:
      case TIMED_WAITING:
      case WAITING:
        return true;

      default:
        throw new IllegalStateException (String.format ("Unrecognized thread state."));
      }
    }
  }

  @Override
  public void join () throws InterruptedException {
    Thread thread;
    synchronized (_threadAssignmentLock) {
      if (_thread == null) {
        return;
      }
      thread = _thread;
    }
    thread.join ();
  }

  @Override
  public void interrupt () {
    synchronized (_threadAssignmentLock) {
      if (_thread != null) {
        _thread.interrupt ();
      }
    }
  }

  @Override
  public State getThreadState () {
    synchronized (_threadAssignmentLock) {
      if (_thread == null) {
        return State.NEW;
      }
      return _thread.getState ();
    }
  }

  @Override
  public Throwable getError () {
    return _lastError;
  }

  protected void notifyScriptStart (Thread thread, FirstPersonUserStory<U> script) {
    // Do nothing;
  }

  protected void notifyScriptComplete (Thread thread, FirstPersonUserStory<U> script) {
    // Do nothing;
  }

  protected void notifyScriptError (Thread thread, FirstPersonUserStory<U> script, Throwable t) {
    // Do nothing;
  }

  @Override
  public String getName () {
    return _name;
  }

  @Override
  public long getExponentialRandom (long ms) {
    return (long) (-Math.log (1 - _random.nextDouble ()) * ms);
  }

  @Override
  public void waitRandom (long ms) throws InterruptedException {
    Thread.sleep (getExponentialRandom (ms));
  }

}
