/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.interactioncontext;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gargoylesoftware.htmlunit.DefaultPageCreator;
import com.gargoylesoftware.htmlunit.WebResponse;
import com.gargoylesoftware.htmlunit.WebWindow;
import com.gargoylesoftware.htmlunit.html.HTMLParser;
import com.gargoylesoftware.htmlunit.html.HtmlPage;
import com.gargoylesoftware.htmlunit.html.XHtmlPage;

/**
 * Overrides the creation of HtmlUnit HtmlPage objects to add functionality
 * needed for the test framework.
 * 
 * What this implements that plain HtmlUnit does not:
 *    <link> tags will throw onload events.
 *    <image> tags will throw onload events.
 * 
 * @author temp_dmenes
 * 
 */
public class FrameworkPageCreator extends DefaultPageCreator
{

  private static final long   serialVersionUID = 1L;
  private static final Logger _logger          = LoggerFactory.getLogger (FrameworkPageCreator.class);
  private static final Method _parseMethod;
  static {
    try {
      _parseMethod = HTMLParser.class.getDeclaredMethod ("parse", WebResponse.class,
          WebWindow.class, HtmlPage.class, boolean.class);
    } catch (NoSuchMethodException e) {
      throw new RuntimeException ("Internals of HtmlUnit have changed--this class needs to be updated!!", e);
    }
    try {
      _parseMethod.setAccessible (true);
    } catch (SecurityException e) {
      throw new RuntimeException ("This code cannot run with a security manager that prevents access to private methods!!", e);
    }
  }

  @Override
  protected HtmlPage createHtmlPage (WebResponse webResponse, WebWindow webWindow) throws IOException {
    final HtmlPage page = new HtmlPage (webResponse.getWebRequest ().getUrl (), webResponse, webWindow);
    processLinks (page);
    parse (webResponse, webWindow, page, false);
    return page;
  }

  @Override
  protected XHtmlPage createXHtmlPage (final WebResponse webResponse,
      final WebWindow webWindow) throws IOException {
    final XHtmlPage page = new XHtmlPage (webResponse.getWebRequest ().getUrl (), webResponse, webWindow);
    processLinks (page);
    parse (webResponse, webWindow, page, true);
    return page;
  }

  /**
   * Throw onload events for all already-loaded stylesheets, then add a listener
   * to throw events for future stylesheets.
   * 
   * This is a bit of a cheat, as we throw the onload event without actually
   * loading the stylesheet.
   * 
   * @param page
   */
  private void processLinks (final HtmlPage page) {
    _logger.debug ("Adding listener for DOM-change events");
    page.addDomChangeListener (new ElementAddListener ());
  }

  /**
   * Accessing the private parse method of the HTMLParser is the only way I can
   * modify the page object BEFORE it is parsed.
   */
  private static void parse (final WebResponse webResponse, final WebWindow webWindow, final HtmlPage page,
      final boolean xhtml)
      throws IOException {
    try {
      _parseMethod.invoke (null, webResponse, webWindow, page, xhtml);
    } catch (IllegalAccessException | IllegalArgumentException e) {
      throw new RuntimeException ("Unexpected error accesssing HTML parser interface", e);
    } catch (InvocationTargetException e) {
      Throwable e2 = e.getTargetException ();
      if (e2 instanceof RuntimeException) {
        throw (RuntimeException) e2;
      }
      else if (e2 instanceof IOException) {
        throw (IOException) e2;
      }
      else {
        throw new RuntimeException ("Unexpected exception invoking HTML parser", e2);
      }
    }
  }

}
