/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.pagedriver;

import org.opentestsystem.shared.test.api.PageDriver;
import org.opentestsystem.shared.test.interactioncontext.HtmlUnitInteractionContext;
import org.opentestsystem.shared.test.interactioncontext.HtmlUnitInteractionResponse;

import com.gargoylesoftware.htmlunit.Page;

/**
 * @author jmambo
 * 
 */
public abstract class HtmlUnitPageDriver implements PageDriver<HtmlUnitInteractionResponse>
{

  private HtmlUnitInteractionContext  _interactionContext;
  private Page                        _page;
  private HtmlUnitInteractionResponse _interactionResponse;

  @Override
  public HtmlUnitPageDriver init (
      HtmlUnitInteractionResponse interactionResponse,
      boolean ensureLoaded) throws Throwable {

    _interactionContext = interactionResponse.getInteractionContext ();
    _page = interactionResponse.getPage ();
    _interactionResponse = interactionResponse;
    if (ensureLoaded) {
      ensurePageLoaded ();
    }
    return this;
  }

  protected Page getPage () {
    return _page;
  }

  protected HtmlUnitInteractionContext getInteractionContext () {
    return _interactionContext;
  }

  protected String getUrl () {
    return getPage ().getUrl ().toString ();
  }

  protected int getStatusCode () {
    return getPage ().getWebResponse ().getStatusCode ();
  }

  protected String getStatusMessage () {
    return getPage ().getWebResponse ().getStatusMessage ();
  }

  @Override
  public void ensurePageLoaded () throws AssertionError {
    boolean isLoaded = false;
    while ((! ( isLoaded = isPageLoaded ())) && (!_interactionResponse.isTimedOut ())) {
      try {
        Thread.sleep (100);
      } catch (InterruptedException e) {
        break;
      }
    }
    if (!isLoaded) {
      throw new AssertionError ("Page not loaded within timeout");
    }
  }
  
  protected HtmlUnitInteractionResponse getInteractionResponse() {
    return _interactionResponse;
  }

  abstract protected boolean isPageLoaded ();

}
