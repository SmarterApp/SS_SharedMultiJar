/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.statistics;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Map.Entry;
import java.util.Queue;
import java.util.UUID;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TimingRecordRecorder
{

  private static final Logger            _logger                 = LoggerFactory.getLogger (TimingRecordRecorder.class);

  private static final String            SQL_ADD_TIMING_RECORDS  = "INSERT INTO timing_records(run_id,user_id,record_id,interaction_type,description,start_time,message,succeeded,failed,total_time,traceback) VALUES (?,?,?,?,?,?,?,?,?)";
  private static final String            SQL_ADD_ACCUMULATORS    = "INSERT INTO accumulators(run_id,user_id,record_id,accumulator_name,accumulator_value) VALUES (?,?,?,?,?)";

  private DataSource                     _dataSource;
  private Queue<InteractionTimingRecord> _queue;
  private TimingRecordSummarizer         _timingRecordSummarizer = new TimingRecordSummarizerImpl ();
  private long                           _recordingInterval      = 30000;
  private int                            _dbBatchSize            = 256;
  private String                         _runId                  = UUID.randomUUID ().toString ();

  public DataSource getDataSource () {
    return _dataSource;
  }

  public void setDataSource (DataSource src) {
    _dataSource = src;
  }

  public Queue<InteractionTimingRecord> getQueue () {
    return _queue;
  }

  public void setQueue (Queue<InteractionTimingRecord> queue) {
    _queue = queue;
  }

  public void setTimingRecordSumarizer (TimingRecordSummarizer summarizer) {
    _timingRecordSummarizer = summarizer;
  }

  public TimingRecordSummarizer getTimingRecordSummarizer () {
    return _timingRecordSummarizer;
  }

  public void setRecordingInterval (long t) {
    _recordingInterval = t;
  }

  public long getRecordingInterval () {
    return _recordingInterval;
  }

  public void setDbBatchSize (int n) {
    _dbBatchSize = n;
  }

  public int getDbBatchSize () {
    return _dbBatchSize;
  }

  public void setRunId (String id) {
    _runId = id;
  }

  public String getRunId () {
    return _runId;
  }

  public Runnable getRefreshTask () {
    return _refreshTask;
  }

  private Runnable _refreshTask = new Runnable ()
                                {
                                  @Override
                                  public void run () {
                                    long t_next = System.currentTimeMillis ();
                                    _logger.info ("Timing record recording task started");
                                    try {
                                      while (true) {
                                        recordNewRecords ();
                                        t_next += getRecordingInterval ();
                                        Thread.sleep (Math.max (0L, t_next - System.currentTimeMillis ()));
                                      }
                                    }
                                    catch (InterruptedException e) {
                                      _logger.info ("Timing record recording task interrupted; ending!");
                                    }
                                  }
                                };

  private void recordNewRecords () {
    _logger.debug ("Recording timing records");
    int nTimingRecords = 0;
    int nAccumulators = 0;
    InteractionTimingRecord record = null;
    DataSource ds = getDataSource ();
    if (ds != null) {
      try (Connection cn = ds.getConnection ()) {
        PreparedStatement stmtAddTimingRecords = cn.prepareStatement (SQL_ADD_TIMING_RECORDS);
        PreparedStatement stmtAddAccumulators = cn.prepareStatement (SQL_ADD_ACCUMULATORS);

        while ((record = _queue.poll ()) != null) {
          nTimingRecords++;
          _timingRecordSummarizer.addObservation (record);

          // timing_records(run_id,user_id,record_id,interaction_type,description,start_time,message,succeeded,failed,total_time,traceback)
          stmtAddTimingRecords.setString (0, _runId);
          stmtAddTimingRecords.setString (1, record.getContext ().getInteractiveUser ().getStatisticsName ());
          stmtAddTimingRecords.setString (2, record.getInteractionId ());
          stmtAddTimingRecords.setString (3, record.getDescription ());
          stmtAddTimingRecords.setTimestamp (4, new Timestamp (record.getStartTime ()));
          stmtAddTimingRecords.setString (5, record.getMessage ());
          stmtAddTimingRecords.setBoolean (6, record.isSucceeded ());
          stmtAddTimingRecords.setBoolean (7, record.isFailed ());
          stmtAddTimingRecords.setLong (8, record.getTotalTime ());
          Throwable cause = record.getCause ();
          if (cause != null) {
            try (StringWriter w = new StringWriter (); PrintWriter pw = new PrintWriter (w)) {
              cause.printStackTrace (pw);
              stmtAddTimingRecords.setString (9, w.toString ());
            } catch (IOException e) {
              _logger.error ("Unexpected IO exception writing stack trace to database", e);
            }
          }
          stmtAddTimingRecords.addBatch ();

          for (Entry<String, Long> entry_i : record.getAccumulators ().entrySet ()) {
            nAccumulators++;
            // accumulators(run_id,user_id,record_id,accumulator_name,accumulator_value)
            stmtAddAccumulators.setString (0, _runId);
            stmtAddAccumulators.setString (1, record.getContext ().getInteractiveUser ().getStatisticsName ());
            stmtAddAccumulators.setString (2, record.getInteractionId ());
            stmtAddAccumulators.setString (3, entry_i.getKey ());
            stmtAddAccumulators.setLong (4, entry_i.getValue ());
            if (nAccumulators >= _dbBatchSize) {
              stmtAddTimingRecords.executeBatch ();
              stmtAddAccumulators.executeBatch ();
              nTimingRecords = 0;
              nAccumulators = 0;
            }
          }
          if (nTimingRecords >= _dbBatchSize) {
            stmtAddTimingRecords.executeBatch ();
            nTimingRecords = 0;
            if (nAccumulators > 0) {
              stmtAddAccumulators.executeBatch ();
              nAccumulators = 0;
            }
          }
        }
        if (nTimingRecords > 0) {
          stmtAddTimingRecords.executeBatch ();
        }

        if (nAccumulators > 0) {
          stmtAddAccumulators.executeBatch ();
        }
      } catch (SQLException e) {
        if (_logger.isDebugEnabled ()) {
          _logger.warn ("Unable to write timing records to configured data source.", e);
        }
        else {
          _logger.warn ("Unable to write timing records to configured data source. Enable DEBUG logging for traceback.");
        }
      }
    }
    while ((record = _queue.poll ()) != null) {
      _timingRecordSummarizer.addObservation (record);
    }
  }
}
