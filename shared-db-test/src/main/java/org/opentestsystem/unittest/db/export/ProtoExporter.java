/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.unittest.db.export;

import java.io.FileOutputStream;

import javax.sql.DataSource;

import org.dbunit.database.DatabaseConfig;
import org.dbunit.database.DatabaseDataSourceConnection;
import org.dbunit.database.IDatabaseConnection;
import org.dbunit.database.QueryDataSet;
import org.dbunit.dataset.xml.FlatXmlDataSet;
import org.dbunit.ext.mysql.MySqlDataTypeFactory;

import com.mchange.v2.c3p0.DataSources;

public class ProtoExporter
{
  private String itembankDbName = "tdscore_proto_itembank";
  private String configsDbName  = "tdscore_proto_configs";
  private String sessionDbName  = "tdscore_proto_session";
 
  public static void main (String[] args) throws Exception {
    ProtoExporter exporter= new ProtoExporter();
    
    exporter.exportConfigs ();
    exporter.exportSession ();
    exporter.exportItembank ();
  }
  
  private DataSource initializeDataSource (String dbName) throws Exception {
    // jdbc:mysql://db-dev.opentestsystem.org:3306/tdscore_dev_session?useServerPrepStmts=false&amp;rewriteBatchedStatements=true
    String jdbcUrl = new StringBuilder ("jdbc:mysql://db-dev.opentestsystem.org:3306/").append (dbName)
        .append ("?useServerPrepStmts=false&amp;rewriteBatchedStatements=true").toString ();
    
    String user = "dbsbac"; 
    String password = "osTyMhRM1C"; 
    DataSource dataSource = DataSources.unpooledDataSource (jdbcUrl, user, password);

    return dataSource;
  }

  private IDatabaseConnection getDBUnitConnection (String dbName) throws Exception {
    DataSource dataSource = initializeDataSource (dbName);

    IDatabaseConnection connection = new DatabaseDataSourceConnection (dataSource);
    return connection;
  }
  private void exportConfigs() throws Exception {
    try {
      String tblList[] = {
//          "client_testtool",
//          "tds_clientaccommodationvalue",
//          "client_testwindow",
//          "client_segmentproperties",
//          "client_tds_rtsattributevalues",
//          "tds_browserwhitelist",
//          "client_testscorefeatures",
          "tds_coremessageobject",
//          "client_subject",
//          "client_accommodationfamily",
//          "client_test_itemtypes",
//          "tds_application",
          "client_timelimits",
//          "client_forbiddenappsexcludeschools",
//          "client_message",
//          "client_testrtsspecs",
//          "tds_testtool",
//          "tds_testtooltype",
//          "client_grade",
          "client",
//          "client_forbiddenappslist",
//          "client_language",
//          "client_toolusage",
//          "tds_clientaccommodationtype",
//          "client_testeligibility",
//          "rts_role",
          "client_systemflags",
//          "client_server",
//          "_messageid",
//          "tds_systemflags",
//          "client_allowips",
//          "tds_testeeattribute",
//          "client_testeeattribute",
//          "statuscodes",
//          "client_testkey",
//          "geo_database",
//          "client_testproperties",
//          "client_tooldependencies",
//          "client_accommodations",
//          "client_testprerequisite",
//          "client_messagearchive",
//          "client_messagetranslationaudit",
//          "client_test_itemconstraint",
//          "client_testeerelationshipattribute",
//          "client_testtoolrule",
//          "client_rtsroles",
//          "client_voicepack",
//          "tds_testeerelationshipattribute",
//          "client_testmode",
          "client_externs",
//          "tds_testtoolrule",
//          "tds_testproperties",
//          "tds_role",
//          "client_testtooltype",
//          "system_networkdiagnostics",
//          "tds_configtype",
//          "client_timewindow",
//          "client_testformproperties",
//          "system_browserwhitelist",
//          "client_tds_rtsattribute",
//          "system_applicationsettings",
          "client_messagetranslation",
          "tds_coremessageuser",
//          "tds_fieldtestpriority",
//          "tds_applicationsettings",
//          "client_fieldtestpriority",
//          "client_testgrades",
          "geo_clientapplication",
//          "client_pilotschools"
      };
      IDatabaseConnection connection = getDBUnitConnection (configsDbName);
      DatabaseConfig config = connection.getConfig();
      config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, new MySqlDataTypeFactory());
      QueryDataSet partialDataSet = new QueryDataSet (connection);
      for (String tblName : tblList) {
        String cmd = String.format ("select * from %s", tblName);
        partialDataSet.addTable (tblName, cmd);
      }

      String xmlFile = this.getClass ().getResource ("/export/protoConfigs.xml").getPath ();
      FlatXmlDataSet.write (partialDataSet, new FileOutputStream (xmlFile));
      System.out.println ("done export configs db");
    } catch (Exception e) {
      System.out.println (e.getMessage ());
      throw e;
    }
  }
  
  private void exportItembank() throws Exception {
    
  }
  
  private void exportSession() throws Exception {
    try {
      String tblList[] = {
          "_externs",
          "_synonyms"
      };
      IDatabaseConnection connection = getDBUnitConnection (sessionDbName);
      DatabaseConfig config = connection.getConfig();
      config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, new MySqlDataTypeFactory());
      QueryDataSet partialDataSet = new QueryDataSet (connection);
      for (String tblName : tblList) {
        String cmd = String.format ("select * from %s", tblName);
        partialDataSet.addTable (tblName, cmd);
      }

      String xmlFile = this.getClass ().getResource ("/export/protoSession.xml").getPath ();
      FlatXmlDataSet.write (partialDataSet, new FileOutputStream (xmlFile));
      System.out.println ("done export session db");
    }   catch (Exception e) {
      System.out.println (e.getMessage ());
      throw e;
    }
  }
}
