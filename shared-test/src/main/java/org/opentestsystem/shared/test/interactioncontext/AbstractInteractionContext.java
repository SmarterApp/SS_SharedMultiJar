/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.interactioncontext;

import java.net.URL;
import java.util.ArrayDeque;
import java.util.Queue;

import org.opentestsystem.shared.test.api.InteractionContext;
import org.opentestsystem.shared.test.api.InteractionResponse;
import org.opentestsystem.shared.test.api.InteractiveUser;
import org.opentestsystem.shared.test.api.PageDriver;
import org.opentestsystem.shared.test.api.WebApplication;
import org.opentestsystem.shared.test.statistics.InteractionTimingRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public abstract class AbstractInteractionContext<R extends InteractionResponse<R>> implements InteractionContext<R>
{

  public static final long               DEFAULT_DEFAULT_TIMEOUT = 60000L;

  @SuppressWarnings ("unused")
  private static final Logger            _logger                 = LoggerFactory.getLogger (AbstractInteractionContext.class);

  private InteractiveUser<R>             _interactiveUser;
  private InteractionTimingRecord        _activeTimingRecord     = null;
  private Queue<InteractionTimingRecord> _timingRecordHistory    = new ArrayDeque<> ();
  private long                           _defaultTimeout         = DEFAULT_DEFAULT_TIMEOUT;

  public AbstractInteractionContext () {
    super ();
  }

  public void init (InteractiveUser<R> interactiveUser) {
    _interactiveUser = interactiveUser;
  }

  public PageDriver<R> _ () {
    return getCurrentPage ();
  }

  @Override
  public R browse (WebApplication webApplication) throws Exception {
    return browse (webApplication, null, getDefaultTimeout ());
  }

  @Override
  public InteractiveUser<R> getInteractiveUser () {
    return _interactiveUser;
  }

  @Override
  public R sendGetRequest (URL url) throws Exception {
    return sendGetRequest(url, getDefaultTimeout ());
  }

 @Override
  public InteractionTimingRecord getActiveTimingRecord () {
    return _activeTimingRecord;
  }

  @Override
  public synchronized InteractionTimingRecord startNewInteraction (String interactionType, String description) {
    if (_activeTimingRecord != null) {
      _activeTimingRecord.succeed (String.format ("Superseded by new interaction %s: %s", interactionType, description));
    }
    _activeTimingRecord = new InteractionTimingRecord (interactionType, description, this);
    return _activeTimingRecord;
  }

  @Override
  public synchronized void succeedActiveInteraction (String message) {
    if (_activeTimingRecord != null) {
      _activeTimingRecord.succeed (message);
    }
  }

  @Override
  public synchronized void failActiveInteraction (String message, Throwable cause) {
    if (_activeTimingRecord != null) {
      _activeTimingRecord.fail (message, cause);
    }
  }

  @Override
  public synchronized InteractionTimingRecord[] getTimingRecordHistory () {
    return _timingRecordHistory.toArray (new InteractionTimingRecord[_timingRecordHistory.size ()]);
  }

  @Override
  public void setTimingRecordQueue (Queue<InteractionTimingRecord> queue) {
    _timingRecordHistory = queue;
  }

  @Override
  public synchronized void inactivateTimingRecord (InteractionTimingRecord record) {
    if (_activeTimingRecord == null) {
      return;
    }
    _timingRecordHistory.add (_activeTimingRecord);
    _activeTimingRecord = null;
  }

  @Override
  public void setDefaultTimeout (long t) {
    _defaultTimeout = t;
  }

  @Override
  public long getDefaultTimeout () {
    return _defaultTimeout;
  }

}
