/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.unittest.db.export;

import java.io.FileOutputStream;

import javax.xml.bind.DatatypeConverter;

import javax.sql.DataSource;
import org.apache.commons.codec.binary.Base64;
import org.dbunit.database.DatabaseConfig;
import org.dbunit.database.DatabaseDataSourceConnection;
import org.dbunit.database.IDatabaseConnection;
import org.dbunit.database.QueryDataSet;
import org.dbunit.dataset.xml.FlatXmlDataSet;
import com.mchange.v2.c3p0.DataSources;

// <entry
// key="jdbc.url">jdbc:sqlserver://38.118.82.146;DatabaseName=TDSCore_Dev_Session2012_Sandbox</entry>
// <entry key="jdbc.userName">dbtds</entry>
// <entry key="jdbc.password">KOJ89238876234rUHJ</entry>
// <entry key="jdbc.driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</entry>
public class AssessmentExporter
{
  // private ComboPooledDataSource childDataSource = null;
  private String itembankDbName = "TDSCore_Load_Itembank";
  private String configsDbName  = "TDSCore_Load_Configs";
  private String sessionDbName  = "TDSCore_Load_Session";

  public static void main (String[] args) throws Exception {
    AssessmentExporter exporter = new AssessmentExporter ();

    //exporter.exportPartialSession ();
    exporter.exportPartialConfigs ();
    exporter.exportPartialItembank ();

    // exporter.exportOneConfigsTable ();
    // exporter.myTest ();
  }

  // private void myTest() throws Exception {
  // String sOrig = "EA4BEA81-BA7B-4862-89CF-05F5156A7D93";
  // String s = sOrig.replace ("-", "");
  // byte[] myBytes = DatatypeConverter.parseHexBinary(s);
  // String encodedBase64 = Base64.encodeBase64String (myBytes);
  // System.out.println (encodedBase64);
  //
  // }
  private DataSource initializeDataSource (String dbName) throws Exception {
    String jdbcUrl = new StringBuilder ("jdbc:sqlserver://38.118.82.148;DatabaseName=").append (dbName).toString ();

    String user = "dbtds";
    String password = "KOJ89238876234rUHJ";
    DataSource dataSource = DataSources.unpooledDataSource (jdbcUrl, user, password);

    return dataSource;
  }

  private IDatabaseConnection getDBUnitConnection (String dbName) throws Exception {
    DataSource dataSource = initializeDataSource (dbName);

    IDatabaseConnection connection = new DatabaseDataSourceConnection (dataSource);
    return connection;
  }

  private void exportOneConfigsTable () throws Exception {
    try {
      IDatabaseConnection connection = getDBUnitConnection (configsDbName);
      DatabaseConfig config = connection.getConfig ();
      config.setProperty (DatabaseConfig.PROPERTY_DATATYPE_FACTORY, new UUIDDataTypeFactory ());
      // config.setProperty(DatabaseConfig.PROPERTY_METADATA_HANDLER, new
      // MySqlMetadataHandler());
      QueryDataSet partialDataSet = new QueryDataSet (connection);

      partialDataSet.addTable ("statuscodes", "select * from dbo.statuscodes");

      String xmlFile = this.getClass ().getResource ("/export/exportedAssessmentConfigsFromMSSQL.xml").getPath ();
      FlatXmlDataSet.write (partialDataSet, new FileOutputStream (xmlFile));
      System.out.println ("done one config db table");
    } catch (Exception e) {
      System.out.println (e.getMessage ());
      throw e;
    }
  }

  //TODO Elena:find out if we need __ItemRescore, __OppRescore, __tempmath tables
  private void exportPartialSession () throws Exception {
    try {
      String tblList[] = {
          "TestOpportunity_ReadOnly",
          //"RTSSchoolGrades",
          "SIM_Itemgroup",
          "SIM_SegmentContentLevel",
         // "SetOfProctorAlertMessages",
          "SIM_SegmentItem",
          "SIMP_Session",
          "TestOpportunity",
          //"R_TestCounts",
          "SIMP_SessionTests",
          //"_SB_Messages",
          "SIMP_Segment",
          //"R_StateParticipationCountsTable",
          //"_SB_MessagesArchive",
          "SIMP_SegmentItem",
          //"R_SBAC_SchoolParticipationCounts",
          "SIMP_Itemgroup",
          //"R_SBAC_ContactInformation",
          "_MissingMessages",
          "SIMP_SegmentContentLevel",
          "AdminEventOpportunities",
          "R_HourlyUsers",
          "AdminEventItems",
          //"GEO_OpportunityHistory",
          // "_SB_MessageHandler",
          "SIM_UserClient",
          //"__ItemRescores",
          //"SIRVE_Audit",
          //"__OppRescores",
          "TesteeComment",
          //"__tempMath",
          //"_SB_ErrorLog",
          "TestOpportunitySegment",
          //"GEO_System",
          "TestoppRequest",
          //"math",
          //"AdminEvent",
          "TesteeAccommodations",
          "_MaxTestOpps",
          //"ClientLatencyArchive",
          "TestoppToolsUsed",
          "TestOpportunityContentCounts",
          "TesteeResponseScore",
          //"LoadTest_Testee",
          //"QC_ValidationException",
          //"ClientLatency",
          "FT_OpportunityItem",
          "TesteeAttribute",
          "TesteeResponse",
          "TesteeResponseArchive",
          "TesteeResponseAudit",
          "TestOpportunitySegmentCounts",
          "TesteeItemHistory",
          "TesteeRelationship",
          "TestoppAbilityEstimate",
          "TestOpportunityScores",
          //"R_AbnormalLogins",
          "SIM_User",
          //"tblCLSClientSessionStatus",
          //"R_HourlyGeolatencyTable",
          //"R_GeolatencyReport",
          "Client_ReportingID",
          "_Synonyms",
          //"SIRVE_Session",
          //"R_SchoolParticipationReport",
          "Client_OS",
          "Session",
          //"GEO_Session",
          "Client_SessionID",
          "FT_GroupSamples",
          "_AnonymousTestee",
          "_Externs",
          //"_SiteLatency",
          "AlertMessages",
          "ItemDistribution",
          //"GEO_ClientSystem",
          "TesteeHistory",
          //"R_BlueprintReport",
          "SessionTests",
          "SIM_Segment",
          
          
          //"_externs",
          //"client_os",
          //"sim_user",
          //"sim_userclient",
      };
      IDatabaseConnection connection = getDBUnitConnection (sessionDbName);
      DatabaseConfig config = connection.getConfig ();
      config.setProperty (DatabaseConfig.PROPERTY_DATATYPE_FACTORY, new UUIDDataTypeFactory ());
      QueryDataSet partialDataSet = new QueryDataSet (connection);
      for (String tblName : tblList) {
        String cmd = String.format ("select * from %s", tblName);
        partialDataSet.addTable (tblName, cmd);
      }

      String xmlFile = this.getClass ().getResource ("/export/SIMSBACSession.xml").getPath ();
      FlatXmlDataSet.write (partialDataSet, new FileOutputStream (xmlFile));
      System.out.println ("done export session db");
    } catch (Exception e) {
      System.out.println (e.getMessage ());
      throw e;
    }
  }

  private void exportPartialItembank () throws Exception {
    try {
      String tblList[] = {
          "tblItem",
          // "_dblatency",
          "_TestUpdate",
          "AllowedItemProps",
          "ImportItemCohorts",
          "tblClient",
          "ImportTestCohorts",
          "tblAlternateTest",
          "tblStimulus",
          // "Loader_ContentLevels",
          "PerformanceLevels",
          // "Loader_Strands",
          // "Loader_Itembank",
          // "Loader_AffinityGroups",
          // "Loader_AffinityItems",
          // "Loader_FormItems",
          // "Loader_Items",
          // "Loader_Forms",
          // "Loader_Stimuli",
          // "Loader_ItemProperties",
          // "Loader_ProficiencyLevels",
          // "Loader_ItemScoreDimension",
          // "ConfigsLoaded",
          "MeasurementParameter",
          // "Loader_Tests",
          "MeasurementModel",
          "TestCohort",
          "tblTestAdmin",
          "tblSetofAdminSubjects",
          "tblSetofAdminItems",
          "tblItemProps",
          // "Loader_LogicalTests",
          "tblSetofItemStrands",
          "tblSetofItemStimuli",
          "_Synonyms",
          "tblSubject",
          "tblItemBank",
          "tblStrand",
          "ItemScoreDimension",
          "AA_ItemCL",
          "ItemMeasurementParameter",
          "TestForm",
          "AffinityGroup",
          // "Loader_ItemCLAncestors",
          "SetofTestGrades",
          "tblAdminStimulus",
          "tblAdminStrand",
          // "Loader_MeasurementParameter",
          "AffinityGroupItem",
          "Projects",
          "TestFormItem",
          // "Loader_Accommodations",
          // "Loader_RulesRelaxValidation",
          // "Loader_StimulusProperties",
          "_Sys_FormtestItems",
          // "tblitemgroup", // not present on 2012
          // "Loader_Errors"
      };
      IDatabaseConnection connection = getDBUnitConnection (itembankDbName);
      DatabaseConfig config = connection.getConfig ();
      config.setProperty (DatabaseConfig.PROPERTY_DATATYPE_FACTORY, new UUIDDataTypeFactory ());
      QueryDataSet partialDataSet = new QueryDataSet (connection);
      for (String tblName : tblList) {
        String cmd = String.format ("select * from %s", tblName);
        partialDataSet.addTable (tblName, cmd);
      }

      String xmlFile = this.getClass ().getResource ("/export/exportedAssessmentItembankFromMSSQL.xml").getPath ();
      FlatXmlDataSet.write (partialDataSet, new FileOutputStream (xmlFile));
      System.out.println ("done export itembank db");
    } catch (Exception e) {
      System.out.println (e.getMessage ());
      throw e;
    }
  }

  private void exportPartialConfigs () throws Exception {
    // partial database export
    try {

      String tblList[] = {
          "_MessageID",
          "Client",
          "Client_AccommodationFamily",
          "Client_Accommodations",
          "Client_AllowIPs",
          "Client_Externs",
          "Client_FieldtestPriority",
          "Client_ForbiddenAppsExcludeSchools",
          "Client_ForbiddenAppsList",
          "Client_Grade",
          "Client_Language",
          "Client_MessageTranslation",
          "Client_MessageTranslationAudit",
          "Client_PilotSchools",
          "Client_RTSRoles",
          "Client_SegmentProperties",
          "Client_Server",
          "Client_Subject",
          "Client_SystemFlags",
          "Client_TDS_RTSAttribute",
          "Client_TDS_RTSAttributeValues",
          "Client_Test_ItemConstraint",
          "Client_Test_Itemtypes",
          "Client_TesteeAttribute",
          "Client_TesteeRelationshipAttribute",
          "Client_TestEligibility",
          "Client_TestformProperties",
          "Client_TestGrades",
          "Client_Testkey",
          "Client_TestMode",
          "Client_TestPrerequisite",
          "Client_TestProperties",
          "Client_TestRTSSpecs",
          "Client_TestscoreFeatures",
          "Client_TestTool",
          "Client_TestToolRule",
          "Client_TestToolType",
          "Client_TestWindow",
          "Client_TimeLimits",
          "Client_TimeWindow",
          "Client_ToolDependencies",
          "Client_ToolUsage",
          "Client_VoicePack",
          //"GEO_ClientApplication",
          //"GEO_Database",
          "RTS_Role",
          "StatusCodes",
          "System_ApplicationSettings",
          "System_BrowserWhiteList",
          "System_NetworkDiagnostics",
          "TDS_Application",
          "TDS_ApplicationSettings",
          "TDS_BrowserWhiteList",
          "TDS_ClientAccommodationType",
          "TDS_ClientAccommodationValue",
          "TDS_ConfigType",
          "TDS_CoreMessageObject",
          "TDS_CoreMessageUser",
          "TDS_FieldtestPriority",
          "TDS_Role",
          "TDS_SystemFlags",
          "TDS_TesteeAttribute",
          "TDS_TesteeRelationshipAttribute",
          "TDS_TestProperties",
          "TDS_TestTool",
          "TDS_TestToolRule",
          "TDS_TestToolType",
          "client_itemscoringconfig",

      };
      IDatabaseConnection connection = getDBUnitConnection (configsDbName);
      DatabaseConfig config = connection.getConfig ();
      config.setProperty (DatabaseConfig.PROPERTY_DATATYPE_FACTORY, new UUIDDataTypeFactory ());
      QueryDataSet partialDataSet = new QueryDataSet (connection);
      for (String tblName : tblList) {
        String cmd = String.format ("select * from %s", tblName);
        partialDataSet.addTable (tblName, cmd);
      }

      String xmlFile = this.getClass ().getResource ("/export/exportedAssessmentConfigsFromMSSQL.xml").getPath ();
      FlatXmlDataSet.write (partialDataSet, new FileOutputStream (xmlFile));
      System.out.println ("done export configs db");
    } catch (Exception e) {
      System.out.println (e.getMessage ());
      throw e;
    }
  }

}
