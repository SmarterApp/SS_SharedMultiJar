/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.api.user;

import org.opentestsystem.shared.test.api.InteractionResponse;
import org.opentestsystem.shared.test.api.InteractiveUser;
import org.opentestsystem.shared.test.api.userstory.FirstPersonUserStory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Required;
import org.springframework.context.ApplicationContext;

public interface FirstPersonInteractiveUser<R extends InteractionResponse<R>,T extends FirstPersonInteractiveUser<R,T>> extends InteractiveUser<R>
{

  /**
   * Class from which the script will be instantiated when it is needed.
   * 
   * The instance will be instantiated directly, using a no-arg constructor. The
   * instance will not be acquired via Spring, and no Spring wiring will be
   * done.
   * 
   * Generally, only one of {@code setScriptClass}, {@code setScript} or
   * {@code setScriptRef} will be used.
   * 
   * @param scriptClass
   *          A subclass of FirstPersonUserStory
   */
  void setScriptClass (Class<? extends FirstPersonUserStory<T>> scriptClass);

  /**
   * A fully instantiated script object, which will be used when needed.
   * 
   * Generally, only one of {@code setScriptClass}, {@code setScript} or
   * {@code setScriptRef} will be used.
   * 
   * @param script
   *          An isntance of FirstPersonUserStory.
   */
  void setScript (FirstPersonUserStory<T> script);

  /**
   * Spring ID from which the script will be instantiated when it is needed.
   * 
   * The instance will be acquired from Spring, and all Spring configuration
   * will be done.
   * 
   * Generally, only one of {@code setScriptClass}, {@code setScript} or
   * {@code setScriptRef} will be used.
   * 
   * @param scriptRef
   *          The Spring ID of a FirstPersonUserStory bean.
   */
  void setScriptRef (String scriptRef);

  /**
   * Call the script's {@code run} method.
   * 
   * Any Throwables raised by the script will be passed through (not caught).
   * The script to be run will be determined by the most recent call to
   * {@code setScript}, {@code setScriptRef} or {@code setScriptClass}
   * 
   * Only one script may run at a time. If a script is running, either because
   * of a previous call to {@code startScript} or because of a call to
   * {@code doScriptSynchronous} in another thread, an
   * {@code IllegalStateException} will be raised.
   * 
   * @throws Throwable
   */
  void doScriptSynchronous () throws Throwable;

  /**
   * Execute the script's {@code run} method in an independent thread.
   * 
   * Any Throwables raised by the script can be retrieved by {@code getError}
   * 
   * Only one script may run at a time. If a script is running, either because
   * of a previous call to {@code startScript} or because of a call to
   * {@code doScriptSynchronous} in another thread, an
   * {@code IllegalStateException} will be raised.
   */
  void startScript ();

  /**
   * True if a script is running, either because of a previous call to
   * {@code startScript} or because of a call to {@code doScriptSynchronous} in
   * a separate thread.
   * 
   * @return the value
   */
  boolean isRunning ();

  /**
   * Wait until any currently running script returns.
   * 
   * This method will wait for any currently running script to conclude,
   * regardless of whetehr it was started by {@code startScript} or by calling
   * {@code doScriptSynchronous} in another thread.
   * 
   * @throws InterruptedException
   */
  void join () throws InterruptedException;

  /**
   * Send an interrupt signal to the running thread.
   */
  void interrupt ();

  /**
   * Return the state of the underlying thread.
   * 
   * Returns {@code Thread.State.NEW} if no thread has yet been configured.
   * 
   * @return the value
   */
  Thread.State getThreadState ();

  /**
   * Any uncaught Throwable that was raised in the script thread.
   * 
   * This value will be erased when another script is started.
   * 
   * @return
   */
  Throwable getError ();

  /**
   * The Spring application context
   * 
   * @param context
   *          the value
   */
  @Autowired
  @Required
  void setApplicationContext (ApplicationContext context);

  /**
   * The Spring application context
   * 
   * @return
   */
  ApplicationContext getApplicationContext ();

  /**
   * What strategy will be used to acquire a script instance.
   * 
   * Depends on which of {@code setScript}, {@code setScriptClass} or
   * {@code setScriptRef} was called
   * 
   * @return The value
   */
  ScriptInstantiationStrategy getStrategy ();

  /**
   * A unique identifier that can be used to identify this particular user
   */
  public String getName ();

  /**
   * Get a random number, determined according to an exponential distribution
   * 
   * @param ms
   *          Mean waiting time in milliseconds
   */
  long getExponentialRandom (long ms);

  /**
   * Wait a random amount of time, determined according to an exponential
   * distribution
   * 
   * @param ms
   *          Mean waiting time in milliseconds
   */
  void waitRandom (long ms) throws InterruptedException;

  enum ScriptInstantiationStrategy {
    /**
     * An explicit script instance has been set, and will be used
     */
    INSTANCE,

    /**
     * A script class has been set. Instance will be acquired via no-arg
     * constructor
     */
    CLASS,

    /**
     * A script ref has been set. Instance will be acquired by calling
     * {@code getBean} on the {@code ApplicationContext}.
     */
    SPRING,

    /**
     * No script instantiation strategy has been set.
     */
    NONE,
  }

}
