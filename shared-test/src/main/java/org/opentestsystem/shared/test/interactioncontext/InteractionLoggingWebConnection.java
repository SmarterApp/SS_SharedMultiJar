/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.interactioncontext;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Map.Entry;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.shared.test.statistics.InteractionTimingRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gargoylesoftware.htmlunit.WebRequest;
import com.gargoylesoftware.htmlunit.WebResponse;
import com.gargoylesoftware.htmlunit.util.NameValuePair;

public class InteractionLoggingWebConnection extends TimingWebConnection
{

  private static final Logger _logger          = LoggerFactory.getLogger (InteractionLoggingWebConnection.class);

  private static int          REQUEST_SEQUENCE = 0;

  public InteractionLoggingWebConnection (HtmlUnitInteractionContext context) {
    super (context);
  }

  @Override
  public WebResponse getResponse (WebRequest request) throws IOException {
    final HtmlUnitInteractionContext context = getInteractionContext ();
    
    InteractionTimingRecord activeTimingRecord = context.getActiveTimingRecord ();
    if ( activeTimingRecord == null ) {
      activeTimingRecord = context.startNewInteraction ("DEFAULT", "Started default interaction");
    }
    
    final String requestLogDirectoryString = (String) context.getInteractiveUser ().getConfigurationSource ().get ("org.opentestsystem.test.RequestLogDirectory");

    final String seq = getNextSequence ();
    File subDir = null;
    boolean writeSucceeded = false;
    
    try {
      if ( StringUtils.isEmpty (requestLogDirectoryString)) {
        throw new IOException("No value configured for org.opentestsystem.test.RequestLogDirectory");
      }
      final File requestLogDirectory = new File (requestLogDirectoryString);
      final String userDirString = context.getInteractiveUser ().getStatisticsName ();
      final String interactionDirString = activeTimingRecord.getInteractionId () + "-" + activeTimingRecord.getInteractionType ();
      subDir = new File (new File (requestLogDirectory, userDirString), interactionDirString);
      subDir.mkdirs ();
      final File f = new File (subDir, seq + "-request.txt");
      try (final OutputStream stream = new FileOutputStream (f);
          final Writer writer = new OutputStreamWriter (stream)) {
        writeIfNotNull (writer, request.getHttpMethod ().toString ());
        writer.write ("\r\n");
        writeIfNotNull (writer, request.getUrl ().toString ());
        writer.write ("\r\n\r\nParameters:\r\n");
        for (NameValuePair parameter_i : request.getRequestParameters ()) {
          writer.write ("  ");
          writeIfNotNull (writer, parameter_i.getName ());
          writer.write (": ");
          writeIfNotNull (writer, parameter_i.getValue ());
          writer.write ("\r\n");
        }
        writer.write ("\r\n\r\nHeaders:\r\n");
        for (Entry<String, String> header_i : request.getAdditionalHeaders ().entrySet ()) {
          writer.write ("  ");
          writeIfNotNull (writer, header_i.getKey ());
          writer.write (": ");
          writeIfNotNull (writer, header_i.getValue ());
          writer.write ("\r\n");
        }
        writer.write ("\r\n\r\nBody:\r\n");
        writeIfNotNull (writer, request.getRequestBody ());
      }
      writeSucceeded = true;
    } catch (Throwable t) {
      if (_logger.isDebugEnabled ()) {
        _logger.warn ("Failed to write request log file.", t);
      }
      else {
        _logger.warn ("Failed to write request log file due to error: " + t.toString ());
      }
    }

    WebResponse response = super.getResponse (request);

    if (writeSucceeded) {
      File f = new File (subDir, seq + "-response.txt");
      try (OutputStream stream = new FileOutputStream (f);
          Writer writer = new OutputStreamWriter (stream)) {
        writeIfNotNull (writer, Integer.toString (response.getStatusCode ()));
        writeIfNotNull (writer, response.getStatusMessage ());
        writer.write ("\r\nLoad time: ");
        writeIfNotNull (writer, Long.toString (response.getLoadTime ()));
        writer.write ("\r\n\r\nContent-Type: ");
        writeIfNotNull (writer, response.getContentType ());
        writer.write ("\r\n\r\nHeaders:\r\n");
        for (NameValuePair parameter_i : response.getResponseHeaders ()) {
          writer.write ("  ");
          writer.write (parameter_i.getName ());
          writer.write (": ");
          writer.write (parameter_i.getValue ());
          writer.write ("\r\n");
        }
        writer.write ("\r\n\r\nBody:\r\n");
        writeIfNotNull (writer, response.getContentAsString ());
      } catch (IOException e) {
        if (_logger.isDebugEnabled ()) {
          _logger.warn ("Failed to write response log file.", e);
        }
        else {
          _logger.warn ("Failed to write response log file due to error: " + e.toString ());
        }
      }
    }
    return response;
  }

  private synchronized String getNextSequence () {
    return String.format ("%09d", ++REQUEST_SEQUENCE);
  }

  private void writeIfNotNull (Writer writer, String s) throws IOException {
    if (s == null) {
      writer.write ("<null>");
    }
    else {
      writer.write (s);
    }
  }
}
