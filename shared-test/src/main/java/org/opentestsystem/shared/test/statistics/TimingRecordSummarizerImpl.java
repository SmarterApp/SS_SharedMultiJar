/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.statistics;

import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;

public class TimingRecordSummarizerImpl implements TimingRecordSummarizer
{
  private final Map<String, CategorySummary> _summaries = new TreeMap<> ();

  @Override
  public void addObservation (InteractionTimingRecord record) {
    CategorySummary summary = _summaries.get (record.getInteractionType ());
    if (summary == null) {
      summary = new CategorySummary ();
      _summaries.put (record.getInteractionType (), summary);
    }
    summary.n++;
    long t = record.getTotalTime ();
    summary.sum += t;
    summary.max = (summary.max < t ? t : summary.max);
    for (Entry<String, Long> entry_i : record.getAccumulators ().entrySet ()) {
      CategorySummary subSummary = summary.accumulatorValueSummaries.get (entry_i.getKey ());
      if (subSummary == null) {
        subSummary = new CategorySummary ();
        summary.accumulatorValueSummaries.put (entry_i.getKey (), subSummary);
      }
      t = entry_i.getValue ();
      subSummary.n++;
      subSummary.sum += t;
      subSummary.max = (subSummary.max < t ? t : subSummary.max);
    }
  }

  @Override
  public String getSummaryAsString () {
    final StringBuilder builder = new StringBuilder(
          " Category                                 | N    | Mean       | Max\r\n"
        + "------------------------------------------+------+------------+---------\r\n");
    final String lineFormat = " %-40s | %4d | %10s | %d\r\n";
    for (Entry<String, CategorySummary> entry_i : _summaries.entrySet ()) {
      String category_i = entry_i.getKey();
      CategorySummary summary_i = entry_i.getValue ();
      String mean_i=".";
      if ( summary_i.n >= 0 ) {
        mean_i = String.format( "%10.1f", (0.0 + summary_i.sum) / (0.0 + summary_i.n) );
      }
      builder.append( String.format(
          lineFormat, category_i, summary_i.n, mean_i, summary_i.max));
      for (Entry<String,CategorySummary> entry_j : summary_i.accumulatorValueSummaries.entrySet ()) {
        String category_j = category_i + "." + entry_j.getKey();
        CategorySummary summary_j = entry_j.getValue ();
        String mean_j=".";
        if ( summary_j.n >= 0 ) {
          mean_j = String.format( "%10.1f", (0.0 + summary_j.sum) / (0.0 + summary_j.n) );
        }
        builder.append( String.format(
            lineFormat, category_j, summary_j.n, mean_j, summary_j.max));
      }
      builder.append( "------------------------------------------+------+------------+---------\r\n");
    }
    return builder.toString ();
  }

  private class CategorySummary
  {
    public long                         sum                       = 0;
    public long                         n                         = 0;
    public long                         max                       = 0;
    public Map<String, CategorySummary> accumulatorValueSummaries = new TreeMap<> ();
  }

}
