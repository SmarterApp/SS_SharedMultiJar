/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.unittest.db;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.Connection;
import java.sql.SQLException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// import org.apache.commons.io.FileUtils;

public class SqlScriptExecutor
{
  private static final Logger _logger = LoggerFactory.getLogger (SqlScriptExecutor.class);

  public static void execScript (String scriptResource, Connection connection) throws IOException, SQLException {
    // String classpath = System.getProperty("java.class.path");
    // String[] classpathEntries = classpath.split(File.pathSeparator);

    ClassLoader cl = SqlScriptExecutor.class.getClassLoader ();
    StringBuilder cmd = new StringBuilder ();
    InputStream stream = cl.getResourceAsStream (scriptResource);
    if (stream != null) {
      try (
          InputStreamReader reader = new InputStreamReader (stream);
          BufferedReader lineReader = new BufferedReader (reader)) {

        String line = lineReader.readLine ();

        while (line != null) {
          line = line.trim ();
          cmd.append (line);
          cmd.append ('\n');
          if (line.endsWith (";")) {
            connection.createStatement ().execute (cmd.toString ());
            cmd.setLength (0);
          }
          line = lineReader.readLine ();
        }
      } catch (IOException e) {
        _logger.error (String.format ("IOException: %s", e.getMessage ()));
        throw e;
      } catch (SQLException se) {
        _logger.error (String.format ("Exception: %s, Original sql statement: %s", se.getMessage (), cmd.toString ()));
        throw se;
      } finally {
        stream.close ();
      }
    }
  }

  public static void execMultipleScripts (String scriptResource, Connection connection) throws IOException, SQLException {

    File directory = null;
    ClassLoader cl = SqlScriptExecutor.class.getClassLoader ();
    URL resource = cl.getResource (scriptResource);

    // resource may be null in case configuration for given database does not
    // have
    // 'views' or 'functions' or 'storedprocedures' subdirectories
    if (resource != null) {
      try {
        // this can throw URISyntaxException
        directory = new File (resource.toURI ());
      } catch (URISyntaxException u) {

        throw new IOException (u.getMessage (), u);
      }
      if (directory != null && directory.exists ()) {

        String[] files = directory.list ();
        for (int i = 0; i < files.length; i++)
        {
          if (files[i].endsWith (".sql") || files[i].endsWith (".SQL")) {
            String fl = new StringBuilder (directory.getAbsolutePath ()).append ('/').append (files[i]).toString ();

            String content = null;
            StringBuilder builder = new StringBuilder ();
            try (BufferedReader br = new BufferedReader (new FileReader (fl))) {
              for (String line; (line = br.readLine ()) != null;) {
                builder.append (modifyScriptLine (line));

              }
            }
            content = builder.toString ();

            // File file = new File (fl);
            // content = FileUtils.readFileToString (file);
            connection.createStatement ().execute (content);
          }
        }
      }
    }
  }

  
  //TODO This is how typical stored procedure, function or trigger look.
  // Line 'DELIMITER $$' needs to be removed
  // Line starting from 'drop...' needs to be removed
  // Line 'end$$' needs to be converted into 'end;'
  // Line 'DELIMITER ;' needs to be removed 
  // Additionally, we need to substitute configs, archive and itembank
  // table names used in views to names of corresponding databases
  // as configured in masterDataSourceProperties
  // (should we pass masterDataSourceproperties as parameter to 
  // static execMultipleScripts method?)
  
  // Example of a stored proc:
  
//DELIMITER $$
//drop procedure if exists `_buildtable` $$

  //create procedure `_buildtable`()
  //begin
  // xxxxx
  //end$$

//DELIMITER ;
  
  // Example of a view:
  //drop view if exists itembank_tblsetofadminitems;

  //create view itembank_tblsetofadminitems
  //as 
  //select * 
  //from tdscore_dev_itembank2012_sandbox.tblsetofadminitems;

  
  private static String modifyScriptLine (String line) {
    return line + '\n';
  }
}
