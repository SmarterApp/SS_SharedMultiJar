/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.jetty;

import javax.servlet.ServletContext;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.web.context.ContextLoaderListener;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.XmlWebApplicationContext;

/**
 * Creates a root WebApplicationContext which inherits from the context provided
 * to the constructor
 * 
 * This class will be registered automatically as an event listener by the
 * JettyWebApplication container.
 * 
 * @author temp_dmenes
 * 
 */
public class InheritingSpringContextLoaderListener extends ContextLoaderListener
{

  private ApplicationContext _externalContext = null;

  private Logger             _logger          = LoggerFactory.getLogger (InheritingSpringContextLoaderListener.class);

  public InheritingSpringContextLoaderListener (ApplicationContext externalContext) {
    _externalContext = externalContext;
  }

  @Override
  public WebApplicationContext createWebApplicationContext (ServletContext servletContext) {
    
    _logger.debug( "Adding root Spring application context to Jetty container" );
    XmlWebApplicationContext uiSpringContext = new XmlWebApplicationContext ();
    uiSpringContext.setServletContext (servletContext);
    uiSpringContext.setParent (_externalContext);
    String contextConfigLocation = servletContext.getInitParameter ("contextConfigLocation");
    if ( ! StringUtils.isEmpty ( contextConfigLocation ) ) {
      uiSpringContext.setConfigLocation (contextConfigLocation);
      _logger.debug( "root Spring application context to Jetty container configured from {}", contextConfigLocation );
    }
    else {
      _logger.debug( "root Spring application context to Jetty container using default configuration location" );
    }
    uiSpringContext.refresh ();
    return uiSpringContext;
  }

}
