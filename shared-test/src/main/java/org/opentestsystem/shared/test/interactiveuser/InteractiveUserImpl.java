/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.interactiveuser;

import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Queue;
import java.util.UUID;

import org.apache.commons.lang.NotImplementedException;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.shared.test.api.InteractionContext;
import org.opentestsystem.shared.test.api.InteractionResponse;
import org.opentestsystem.shared.test.api.InteractiveUser;
import org.opentestsystem.shared.test.api.PageDriver;
import org.opentestsystem.shared.test.api.WebApplication;
import org.opentestsystem.shared.test.api.user.CredentialSet;
import org.opentestsystem.shared.test.statistics.InteractionTimingRecord;

/**
 * @author jmambo
 * 
 */
public class InteractiveUserImpl<R extends InteractionResponse<R>> implements InteractiveUser<R>
{

  private List<InteractionContext<R>> _contexts            = new ArrayList<> ();
  private int                         _defaultContextIndex = 0;
  private Map<String, CredentialSet>  _credentials         = new HashMap<String, CredentialSet> ();
  private String                      _statisticsName      = UUID.randomUUID ().toString ();
  private Properties                  _configurationSource = System.getProperties ();

  @Override
  public void startupBeforeDependencies () throws Exception {
    createDefaultInteractionContext ();
  }

  @SuppressWarnings ("unchecked")
  private InteractionContext<R> createDefaultInteractionContext () throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, SecurityException, IllegalArgumentException, InvocationTargetException {
    String interactionContextClassName = getConfigurationSource ().getProperty ("org.opentestsystem.test.InteractionContextClass");
    if (StringUtils.isBlank (interactionContextClassName)) {
      interactionContextClassName = "org.opentestsystem.shared.test.interactioncontext.HtmlUnitInteractionContext";
    }
    final Class<? extends InteractionContext<R>> interactionContextClass =
        (Class<? extends InteractionContext<R>>) InteractiveUserImpl.class.getClassLoader ().loadClass (interactionContextClassName);
    
    final InteractionContext<R> newContext = interactionContextClass.newInstance ();
    newContext.init (this);
    _contexts.add (newContext);
    return newContext;
  }

  @Override
  public void startupAfterDependencies () throws Exception {
  }

  @Override
  public void afterTestBeforeDependencies () throws Exception {
  }

  @Override
  public void afterTestAfterDependencies () throws Exception {
    for (InteractionContext<?> context : _contexts) {
      context.shutdown ();
    }
    _contexts.clear ();
  }

  @Override
  public void betweenTestsBeforeDependencies () throws Exception {
    createDefaultInteractionContext ();
    _defaultContextIndex = 0;
  }

  @Override
  public void betweenTestsAfterDependencies () throws Exception {
  }

  @Override
  public void shutdownBeforeDependencies () throws Exception {
  }

  @Override
  public void shutdownAfterDependencies () throws Exception {
  }

  @Override
  public R browse (WebApplication webApplication) throws Exception {
    return getDefaultInteractionContext ().browse (webApplication);
  }

  @Override
  public R browse (WebApplication webApplication, String path, long timeout) throws Exception {
    return getDefaultInteractionContext ().browse (webApplication, path, timeout);
  }

  @Override
  public R sendGetRequest (URL url, long timeout) throws Exception {
    return getDefaultInteractionContext ().sendGetRequest (url,timeout);
  }

  @Override
  public void setDefaultTimeout (long t) {
    getDefaultInteractionContext ().setDefaultTimeout (t);
  }

  @Override
  public long getDefaultTimeout () {
    return getDefaultInteractionContext ().getDefaultTimeout ();
  }

  /*
   * (non-Javadoc)
   * 
   * @see
   * org.opentestsystem.shared.test.api.InteractionContext#getCookie(java.lang
   * .String)
   */
  @Override
  public String getCookie (String key) throws Exception {
    return getDefaultInteractionContext ().getCookie (key);
  }

  /*
   * (non-Javadoc)
   * 
   * @see
   * org.opentestsystem.shared.test.api.InteractiveUser#setDefaultInteractionContext
   * (org.opentestsystem.shared.test.api.InteractionContext)
   */
  @Override
  public void setDefaultInteractionContext (InteractionContext<?> context) {
    boolean found = false;
    for (int i = 0; i < _contexts.size (); i++) {
      if (_contexts.get (i) == context) {
        found = true;
        _defaultContextIndex = i;
        break;
      }
    }
    if (!found) {
      throw new IndexOutOfBoundsException ("Interaction context not owned by this user!");
    }
  }

  @Override
  public InteractionContext<R> getDefaultInteractionContext () {
    return _contexts.get (_defaultContextIndex);
  }

  @Override
  public Collection<InteractionContext<R>> getInteractionContexts () {
    return _contexts;
  }

  @Override
  public InteractionContext<R> startNewInteractionContext () {
    try {
      return createDefaultInteractionContext ();
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | NoSuchMethodException | SecurityException | IllegalArgumentException | InvocationTargetException e) {
      throw new RuntimeException( "Error creating interaction context", e );
    }
  }

  @Override
  public PageDriver<R> getCurrentPage () {
    InteractionContext<R> context = getDefaultInteractionContext ();
    return context.getCurrentPage ();
  }

  @Override
  public PageDriver<R> _ () {
    return getCurrentPage ();
  }

  @Override
  public CredentialSet getCredentialSet (String key) {
    return _credentials.get (key);
  }

  @Override
  public R sendGetRequest (URL url) throws Exception {
    return getDefaultInteractionContext ().sendGetRequest (url);
  }

  @Override
  public InteractiveUser<R> getInteractiveUser () {
    return this;
  }

  @Override
  public void shutdown () throws Exception {
    shutdownAfterDependencies ();
  }

  @Override
  public void addCredentialSet (String key, CredentialSet credentialSet) {
    _credentials.put (key, credentialSet);
  }

  @Override
  public InteractionTimingRecord getActiveTimingRecord () {
    return getDefaultInteractionContext ().getActiveTimingRecord ();
  }

  @Override
  public InteractionTimingRecord startNewInteraction (String interactionType, String description) {
    return getDefaultInteractionContext ().startNewInteraction (interactionType, description);
  }

  @Override
  public void succeedActiveInteraction (String message) {
    getDefaultInteractionContext ().succeedActiveInteraction (message);
  }

  @Override
  public void failActiveInteraction (String message, Throwable cause) {
    getDefaultInteractionContext ().failActiveInteraction (message, cause);
  }

  @Override
  public InteractionTimingRecord[] getTimingRecordHistory () {
    return getDefaultInteractionContext ().getTimingRecordHistory ();
  }

  @Override
  public void setTimingRecordQueue (Queue<InteractionTimingRecord> queue) {
    getDefaultInteractionContext ().setTimingRecordQueue (queue);
  }

  @Override
  public void inactivateTimingRecord (InteractionTimingRecord record) {
    throw new NotImplementedException ("This should never be called on anything but the actual underlying InteractionContext implementation");
  }

  protected void setStatisticsName (String name) {
    _statisticsName = name;
  }

  @Override
  public String getStatisticsName () {
    return _statisticsName;
  }

  @Override
  public Properties getConfigurationSource () {
    return _configurationSource;
  }

  @Override
  public URL getBaseUrl () {
    return getDefaultInteractionContext ().getBaseUrl ();
  }

  @Override
  public void setConfigurationSource (Properties configurationSource) {
    _configurationSource = configurationSource;
  }

  @Override
  public void init (InteractiveUser<R> user) {
    throw new UnsupportedOperationException("Only use init for actual interaction context classes");
  }
  
}
