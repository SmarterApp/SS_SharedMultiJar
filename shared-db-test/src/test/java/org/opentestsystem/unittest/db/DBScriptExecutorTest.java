/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.unittest.db;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith (SpringJUnit4ClassRunner.class)
@ContextConfiguration (locations = "/test-context-scripts.xml")
public class DBScriptExecutorTest
{
  @SuppressWarnings ("unused")
  private static final Logger  _logger         = LoggerFactory.getLogger (DBScriptExecutorTest.class);

  @Autowired
  private DBSchemaDeployerImpl configsSchema   = null;

  @Autowired
  private DBScriptExecutor     configsScripts  = null;

  @Autowired
  private DBSchemaDeployerImpl itembankSchema  = null;

  @Autowired
  private DBScriptExecutor     itembankScripts = null;

  @Autowired
  private DBSchemaDeployerImpl archiveSchema   = null;

  @Autowired
  private DBScriptExecutor     archiveScripts  = null;

  @Autowired
  private DBSchemaDeployerImpl sessionSchema   = null;

  @Autowired
  private DBScriptExecutor     sessionScripts  = null;

  @Autowired
  private DBSchemaDeployerImpl corestandardsSchema   = null;

  @Autowired
  private DBScriptExecutor     corestandardsScripts  = null;
  
  @Autowired
  private DBSchemaDeployerImpl permissionsSchema   = null;

  @Autowired
  private DBScriptExecutor     permissionsScripts  = null;
  
  @Test
  public void testCorestandards () throws Exception {
    corestandardsSchema.setKeepSchema (true);

    corestandardsSchema.startupBeforeDependencies ();
    corestandardsScripts.startupBeforeDependencies ();

    corestandardsScripts.startupAfterDependencies ();
    corestandardsSchema.startupAfterDependencies ();

    corestandardsSchema.betweenTestsBeforeDependencies ();
    corestandardsScripts.betweenTestsBeforeDependencies ();

    corestandardsScripts.betweenTestsAfterDependencies ();
    corestandardsSchema.betweenTestsAfterDependencies ();

    corestandardsSchema.shutdownBeforeDependencies ();
    corestandardsScripts.shutdownBeforeDependencies ();

    corestandardsScripts.shutdownAfterDependencies ();
    corestandardsSchema.shutdownAfterDependencies ();
  }
  
  @Test
  public void testPermissions () throws Exception {
    permissionsSchema.setKeepSchema (true);

    permissionsSchema.startupBeforeDependencies ();
    permissionsScripts.startupBeforeDependencies ();

    permissionsScripts.startupAfterDependencies ();
    permissionsSchema.startupAfterDependencies ();

    permissionsSchema.betweenTestsBeforeDependencies ();
    permissionsScripts.betweenTestsBeforeDependencies ();

    permissionsScripts.betweenTestsAfterDependencies ();
    permissionsSchema.betweenTestsAfterDependencies ();

    permissionsScripts.shutdownBeforeDependencies ();

    permissionsScripts.shutdownAfterDependencies ();
    permissionsSchema.shutdownAfterDependencies ();
  }
  
  @Test
  public void testConfigs () throws Exception {
    configsSchema.setKeepSchema (true);

    configsSchema.startupBeforeDependencies ();
    configsScripts.startupBeforeDependencies ();

    configsScripts.startupAfterDependencies ();
    configsSchema.startupAfterDependencies ();

    configsSchema.betweenTestsBeforeDependencies ();
    configsScripts.betweenTestsBeforeDependencies ();

    configsScripts.betweenTestsAfterDependencies ();
    configsSchema.betweenTestsAfterDependencies ();

    configsSchema.shutdownBeforeDependencies ();
    configsScripts.shutdownBeforeDependencies ();

    configsScripts.shutdownAfterDependencies ();
    configsSchema.shutdownAfterDependencies ();
  }
  
  @Test
  public void testItembank () throws Exception {
    itembankSchema.setKeepSchema (true);

    itembankSchema.startupBeforeDependencies ();
    itembankScripts.startupBeforeDependencies ();

    itembankScripts.startupAfterDependencies ();
    itembankSchema.startupAfterDependencies ();

    itembankSchema.betweenTestsBeforeDependencies ();
    itembankScripts.betweenTestsBeforeDependencies ();

    itembankScripts.betweenTestsAfterDependencies ();
    itembankSchema.betweenTestsAfterDependencies ();

    itembankSchema.shutdownBeforeDependencies ();
    itembankScripts.shutdownBeforeDependencies ();

    itembankScripts.shutdownAfterDependencies ();
    itembankSchema.shutdownAfterDependencies ();
  }
  
  @Test
  public void testArchive () throws Exception {
    archiveSchema.setKeepSchema (true);

    archiveSchema.startupBeforeDependencies ();
    archiveScripts.startupBeforeDependencies ();

    archiveScripts.startupAfterDependencies ();
    archiveSchema.startupAfterDependencies ();

    archiveSchema.betweenTestsBeforeDependencies ();
    archiveScripts.betweenTestsBeforeDependencies ();

    archiveScripts.betweenTestsAfterDependencies ();
    archiveSchema.betweenTestsAfterDependencies ();

    archiveSchema.shutdownBeforeDependencies ();
    archiveScripts.shutdownBeforeDependencies ();

    archiveScripts.shutdownAfterDependencies ();
    archiveSchema.shutdownAfterDependencies ();
  }

  @Test
  public void testSession () throws Exception {
    configsSchema.setKeepSchema (true);
    archiveSchema.setKeepSchema (true);
    itembankSchema.setKeepSchema (true);
    sessionSchema.setKeepSchema (true);

    configsSchema.startupBeforeDependencies ();
    archiveSchema.startupBeforeDependencies ();
    itembankSchema.startupBeforeDependencies ();
    sessionSchema.startupBeforeDependencies ();

    // now we have all four databases and tables in them created
    sessionScripts.startupBeforeDependencies ();
    sessionScripts.startupAfterDependencies ();

    sessionSchema.startupAfterDependencies ();
    itembankSchema.startupAfterDependencies ();
    archiveSchema.startupAfterDependencies ();
    configsSchema.startupAfterDependencies ();

    // now we have all indices and constraints
    // created in all four databases
    configsSchema.betweenTestsBeforeDependencies ();
    archiveSchema.betweenTestsBeforeDependencies ();
    itembankSchema.betweenTestsBeforeDependencies ();
    sessionSchema.betweenTestsBeforeDependencies ();

    // now we have all four databases and tables in them created
    sessionScripts.betweenTestsBeforeDependencies ();
    
    sessionScripts.betweenTestsAfterDependencies ();

    sessionSchema.betweenTestsAfterDependencies ();
    itembankSchema.betweenTestsAfterDependencies ();
    archiveSchema.betweenTestsAfterDependencies ();
    configsSchema.betweenTestsAfterDependencies ();

    configsSchema.shutdownBeforeDependencies ();
    archiveSchema.shutdownBeforeDependencies ();
    itembankSchema.shutdownBeforeDependencies ();
    sessionSchema.shutdownBeforeDependencies ();

    // now we have all four databases and tables in them created
    sessionScripts.shutdownBeforeDependencies ();
    sessionScripts.shutdownAfterDependencies ();

    sessionSchema.shutdownAfterDependencies ();
    itembankSchema.shutdownAfterDependencies ();
    archiveSchema.shutdownAfterDependencies ();
    configsSchema.shutdownAfterDependencies ();
  }
}
