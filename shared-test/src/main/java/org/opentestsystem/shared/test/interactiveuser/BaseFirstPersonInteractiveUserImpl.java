/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.interactiveuser;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.shared.test.api.InteractionResponse;
import org.opentestsystem.shared.test.api.user.FirstPersonInteractiveUser;
import org.opentestsystem.shared.test.api.userstory.FirstPersonUserStory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;

@SuppressWarnings ("unchecked")
public abstract class BaseFirstPersonInteractiveUserImpl<R extends InteractionResponse<R>,U extends FirstPersonInteractiveUser<R,U>>
    extends InteractiveUserImpl<R> implements FirstPersonInteractiveUser<R,U>
{

  private volatile Class<? extends FirstPersonUserStory<U>> _scriptClass;
  private volatile FirstPersonUserStory<U>                  _script;
  private volatile String                                   _scriptRef;
  private volatile ApplicationContext                       _applicationContext;
  private volatile ScriptInstantiationStrategy              _strategy = ScriptInstantiationStrategy.NONE;

  public BaseFirstPersonInteractiveUserImpl () {
    super ();
  }

  @Override
  public void setScript (FirstPersonUserStory<U> script) {
    _script = (FirstPersonUserStory<U>) script;
    _strategy = (script == null ? ScriptInstantiationStrategy.NONE : ScriptInstantiationStrategy.INSTANCE);
  }

  protected FirstPersonUserStory<U> getScript () {
    return _script;
  }

  @Override
  public void setScriptClass (Class<? extends FirstPersonUserStory<U>> scriptClass) {
    _scriptClass = scriptClass;
    _strategy = (scriptClass == null ? ScriptInstantiationStrategy.NONE : ScriptInstantiationStrategy.CLASS);
  }

  protected Class<? extends FirstPersonUserStory<U>> getScriptClass () {
    return _scriptClass;
  }

  @Override
  public void setScriptRef (String scriptRef) {
    _scriptRef = scriptRef;
    _strategy = (StringUtils.isEmpty (scriptRef) ? ScriptInstantiationStrategy.NONE : ScriptInstantiationStrategy.SPRING);
  }

  protected String getScriptRef () {
    return _scriptRef;
  }

  @Autowired
  @Override
  public void setApplicationContext (ApplicationContext context) {
    _applicationContext = context;
  }

  @Override
  public ApplicationContext getApplicationContext () {
    return _applicationContext;
  }

  protected FirstPersonUserStory<U> getScriptInstance () {
    switch (getStrategy ()) {
    default:
    case NONE:
      throw new IllegalStateException ("Tried to run script with no script set");

    case INSTANCE:
      _scriptClass = (Class<? extends FirstPersonUserStory<U>>) _script.getClass ();
      _script.setMe ((U) this);
      _scriptRef = null;
      return _script;

    case CLASS:
      try {
        _script = _scriptClass.newInstance ();
        _script.setApplicationContext (getApplicationContext ());
        _script.setMe ((U) this);
        _scriptRef = null;
        return _script;
      } catch (Throwable t) {
        throw new RuntimeException ("Error creating script instance", t);
      }

    case SPRING:
      _script = (FirstPersonUserStory<U>) getApplicationContext ().getBean (_scriptRef);
      _script.setMe ((U) this);
      _scriptClass = (Class<? extends FirstPersonUserStory<U>>) _script.getClass ();
      return _script;
    }
  }

  @Override
  public ScriptInstantiationStrategy getStrategy () {
    return _strategy;
  }

}
