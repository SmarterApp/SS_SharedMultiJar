/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.statistics;

import java.util.HashMap;
import java.util.Map;

import org.opentestsystem.shared.test.api.InteractionContext;

public class InteractionTimingRecord
{

  private final String             _interactionType;
  private final String             _interactionId;
  private final String             _description;
  private String                   _message      = null;
  private Throwable                _cause        = null;

  private boolean                  _succeeded    = false;
  private boolean                  _failed       = false;
  private boolean                  _complete     = false;

  private final long               _startTime;
  private long                     _finishTime   = 0;
  private Map<String, Long>        _accumulators = new HashMap<> ();

  private final InteractionContext<?> _context;

  private static long              _nextId       = 0;

  /**
   * INTERNAL API--DO NOT CALL DIRECTLY
   * 
   * This class should be instantiated by calling
   * InteractionContext.startNewInteraction()
   * 
   * @param interactionType
   * @param description
   */
  public InteractionTimingRecord (
      String interactionType,
      String description,
      InteractionContext<?> context) {
    _interactionType = interactionType;
    _description = description;
    _startTime = System.currentTimeMillis ();
    _interactionId = getNextId ();
    _context = context;
  }

  /**
   * Describes general class of this interaction
   * 
   * @return
   */
  public String getInteractionType () {
    return _interactionType;
  }

  /**
   * Unique identifier for this interaction. Used to collate logging data from
   * multiple sources
   * 
   * @return
   */
  public String getInteractionId () {
    return _interactionId;
  }

  /**
   * Long description for reports
   * 
   * @return
   */
  public String getDescription () {
    return _description;
  }

  /**
   * Time (ms since epoch) that this interaction started
   * 
   * @return
   */
  public long getStartTime () {
    return _startTime;
  }
  
  public synchronized InteractionContext<?> getContext() {
    return _context;
  }

  /**
   * Record failure of this interaction.
   * 
   * The methods fail() and succeed() are meant only to be called once. No error
   * will be raised if they are called repeatedly, but some statistics may be
   * overwritten.
   * 
   * @param message
   * @param cause
   */
  public synchronized void fail (String message, Throwable cause) {
    if (!_complete) {
      _context.inactivateTimingRecord (this);
    }
    _complete = true;
    _failed = true;
    _succeeded = false;
    _message = message;
    _cause = cause;
    _finishTime = System.currentTimeMillis ();
  }

  /**
   * Record success of this interaction.
   * 
   * The methods fail() and succeed() are meant only to be called once. No error
   * will be raised if they are called repeatedly, but some statistics may be
   * overwritten.
   * 
   * @param message
   * @param cause
   */
  public synchronized void succeed (String message) {
    if (!_complete) {
      _context.inactivateTimingRecord (this);
    }
    _complete = true;
    _failed = false;
    _succeeded = true;
    _message = message;
    _cause = null;
    _finishTime = System.currentTimeMillis ();
  }

  /**
   * Message recorded for success or failure of interaction
   * 
   * @return
   */
  public String getMessage () {
    return _message;
  }

  /**
   * A Throwable object (Exception, Error, etc.) that was the cause of this
   * interaction's failure.
   * 
   * @return
   */
  public Throwable getCause () {
    return _cause;
  }

  /**
   * Has succeed() been called?
   * 
   * @return
   */
  public boolean isSucceeded () {
    return _succeeded;
  }

  /**
   * Has fail() been called?
   * 
   * @return
   */
  public boolean isFailed () {
    return _failed;
  }

  /**
   * Has either succeed() or fail() been called?
   * 
   * @return
   */
  public boolean isComplete () {
    return _complete;
  }

  /**
   * Total time from creation of this record to call to fail() or succeed()
   * 
   * @return
   */
  public long getTotalTime () {
    return _finishTime - _startTime;
  }

  /**
   * Add amount to an accumulator
   * 
   * The interaction context contains a set of accumulators, which can be used
   * to accumulate e.g., time spent on various activities. Any unique String can
   * be used as an accumulator key. All accumulators start at 0.
   * 
   * @param key
   *          Unique identifying string
   * @param amount
   *          Amount by which accumulator will be incremented.
   * @return The new amount after accumulation.
   */
  public synchronized long accumulate (String key, long amount) {
    Long x = _accumulators.get (key);
    if (x == null) {
      x = 0L;
    }
    x += amount;
    _accumulators.put (key, x);
    return x;
  }

  public synchronized long getAccumulatorValue (String key) {
    Long x = _accumulators.get (key);
    if (x != null) {
      return x;
    }
    return 0L;
  }
  
  public synchronized Map<String,Long> getAccumulators() {
    return new HashMap<String,Long>(_accumulators);
  }

  private static synchronized String getNextId () {
    return Long.toString (_nextId++);
  }

}
