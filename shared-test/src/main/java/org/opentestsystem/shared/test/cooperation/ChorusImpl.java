/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.cooperation;

import java.lang.Thread.State;
import java.net.URL;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Properties;
import java.util.Queue;
import java.util.Set;

import org.opentestsystem.shared.test.api.InteractionContext;
import org.opentestsystem.shared.test.api.InteractionResponse;
import org.opentestsystem.shared.test.api.InteractiveUser;
import org.opentestsystem.shared.test.api.PageDriver;
import org.opentestsystem.shared.test.api.WebApplication;
import org.opentestsystem.shared.test.api.cooperation.Chorus;
import org.opentestsystem.shared.test.api.cooperation.CooperativeInteractiveUser;
import org.opentestsystem.shared.test.api.cooperation.Cue;
import org.opentestsystem.shared.test.api.cooperation.CuePattern;
import org.opentestsystem.shared.test.api.cooperation.Stage;
import org.opentestsystem.shared.test.api.cooperation.UserFactory;
import org.opentestsystem.shared.test.api.user.CredentialSet;
import org.opentestsystem.shared.test.interactiveuser.BaseFirstPersonInteractiveUserImpl;
import org.opentestsystem.shared.test.statistics.InteractionTimingRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ChorusImpl<R extends InteractionResponse<R>, U extends CooperativeInteractiveUser<R, U>>
    extends BaseFirstPersonInteractiveUserImpl<R, U>
    implements Chorus<R, U>
{
  private Stage                          _stage             = null;
  private String                         _name              = null;
  private static int                     _nextSeq           = 0;
  private static final Object            _seqLock           = new Object ();
  private final List<U>                  _members           = new ArrayList<U> ();
  private int                            _nMembers          = -1;
  private UserFactory<? extends U>       _factory           = null;
  private static final Logger            _logger            = LoggerFactory.getLogger (ChorusImpl.class);
  private Queue<InteractionTimingRecord> _timingRecordQueue = new ArrayDeque<> ();

  public ChorusImpl () {
    this ("CooperativeInteractiveUser");
  }

  public ChorusImpl (String base) {
    super ();
    synchronized (_seqLock) {
      StringBuilder idBuilder = new StringBuilder (base);
      idBuilder.append (_nextSeq);
      _name = idBuilder.toString ();
      _nextSeq++;
    }
  }

  @Override
  public void setStage (Stage stage) {
    _stage = stage;
  }

  @Override
  public Stage getStage () {
    return _stage;
  }

  @Override
  public void say (Cue cue) {
    _stage.sayCue (cue);
  }

  @Override
  public List<Cue> listenFor (CuePattern pattern) throws InterruptedException {
    return _stage.listenForCues (pattern);
  }

  @Override
  public void startupBeforeDependencies () throws Exception {
    if (_nMembers < 0) {
      throw new IllegalStateException ("Number of chorus members not set or set to a negative number.");
    }
    clear ();
    for (int i = 0; i < _nMembers; i++) {
      U member = _factory.create ();
      member.setApplicationContext (getApplicationContext ());
      switch (getStrategy ()) {
      case CLASS:
        member.setScriptClass (getScriptClass ());
        break;
      case INSTANCE:
        member.setScript (getScript ());
        break;
      case SPRING:
        member.setScriptRef (getScriptRef ());
        break;
      case NONE:
        // DO NOTHING--WE WILL SEND A WARNING TO THE LOG!!
      }
      member.setStage (getStage ());
      member.setConfigurationSource (getConfigurationSource ());
      _members.add (member);
      member.startupBeforeDependencies ();
      member.setTimingRecordQueue (_timingRecordQueue);
    }
    if (getStrategy () == ScriptInstantiationStrategy.NONE) {
      _logger.warn ("No script has been provided for the chorus members to perform!");
    }
    for (U member_i : _members) {
      member_i.startupBeforeDependencies ();
    }
  }

  @Override
  public void startupAfterDependencies () throws Exception {
    for (U member_i : _members) {
      member_i.startupAfterDependencies ();
    }
  }

  @Override
  public void betweenTestsBeforeDependencies () throws Exception {
    for (U member_i : _members) {
      member_i.betweenTestsBeforeDependencies ();
    }
  }

  @Override
  public void betweenTestsAfterDependencies () throws Exception {
    for (U member_i : _members) {
      member_i.betweenTestsAfterDependencies ();
    }
  }

  @Override
  public void shutdownBeforeDependencies () throws Exception {
    for (U member_i : _members) {
      member_i.shutdownBeforeDependencies ();
    }
  }

  @Override
  public void shutdownAfterDependencies () throws Exception {
    for (U member_i : _members) {
      member_i.shutdownAfterDependencies ();
    }
  }

  /**
   * Throws an UnsupportedOperationException
   */
  @Override
  public R browse (WebApplication webApplication) throws Exception {
    throw new UnsupportedOperationException ("The entire chorus does not share a single InteractionContext. Call this method from the individual chorus members' first person user stories.");
  }

  /**
   * Throws an UnsupportedOperationException
   */
  @Override
  public R browse (WebApplication webApplication, String path, long timeout) throws Exception {
    throw new UnsupportedOperationException ("The entire chorus does not share a single InteractionContext. Call this method from the individual chorus members' first person user stories.");
  }

  /**
   * Throws an UnsupportedOperationException
   */
  @Override
  public String getCookie (String key) throws Exception {
    throw new UnsupportedOperationException ("The entire chorus does not share a single InteractionContext. Call this method from the individual chorus members' first person user stories.");
  }

  /**
   * Throws an UnsupportedOperationException
   */
  @Override
  public void setDefaultInteractionContext (InteractionContext<?> context) {
    throw new UnsupportedOperationException ("The entire chorus does not share a single InteractionContext. Call this method from the individual chorus members' first person user stories.");
  }

  /**
   * Throws an UnsupportedOperationException
   */
  @Override
  public InteractionContext<R> getDefaultInteractionContext () {
    throw new UnsupportedOperationException ("The entire chorus does not share a single InteractionContext. Call this method from the individual chorus members' first person user stories.");
  }

  /**
   * Throws an UnsupportedOperationException
   */
  @Override
  public Collection<InteractionContext<R>> getInteractionContexts () {
    throw new UnsupportedOperationException ("The entire chorus does not share a single InteractionContext. Call this method from the individual chorus members' first person user stories.");
  }

  /**
   * Throws an UnsupportedOperationException
   */
  @Override
  public InteractionContext<R> startNewInteractionContext () {
    throw new UnsupportedOperationException ("The entire chorus does not share a single InteractionContext. Call this method from the individual chorus members' first person user stories.");
  }

  /**
   * Throws an UnsupportedOperationException
   */
  @Override
  public PageDriver<R> getCurrentPage () {
    throw new UnsupportedOperationException ("The entire chorus does not share a single InteractionContext. Call this method from the individual chorus members' first person user stories.");
  }

  /**
   * Throws an UnsupportedOperationException
   */
  @Override
  public CredentialSet getCredentialSet (String key) {
    throw new UnsupportedOperationException ("The entire chorus does not share a single set of CredentialSets. Call this method from the individual chorus members' first person user stories.");
  }

  /**
   * Throws an UnsupportedOperationException
   */
  @Override
  public R sendGetRequest (URL url) throws Exception {
    throw new UnsupportedOperationException ("The entire chorus does not share a single InteractionContext. Call this method from the individual chorus members' first person user stories.");
  }

  /**
   * Throws an UnsupportedOperationException
   */
  @Override
  public InteractiveUser<R> getInteractiveUser () {
    throw new UnsupportedOperationException ("The entire chorus does not share a single InteractionContext. Call this method from the individual chorus members' first person user stories.");
  }

  @Override
  public void shutdown () throws Exception {
    for (U member_i : _members) {
      member_i.shutdown ();
    }
  }

  /**
   * Throws an UnsupportedOperationException
   */
  @Override
  public void addCredentialSet (String key, CredentialSet credentialSet) {
    throw new UnsupportedOperationException ("The entire chorus does not share a single set of CredentialSets. Call this method from the individual chorus members' first person user stories.");
  }

  @Override
  public synchronized void doScriptSynchronous () throws Throwable {
    startScript ();
    join ();
  }

  @Override
  public synchronized void startScript () {
    for (U member_i : _members) {
      member_i.startScript ();
    }
  }

  /**
   * Returns true if any of the members returns true.
   * 
   * No effort is made to synchronize the calls to the threads of the members,
   * so the response may not be very meaningful.
   */
  @Override
  public boolean isRunning () {
    for (U member_i : _members) {
      if (member_i.isRunning ())
        return true;
    }
    return false;
  }

  /**
   * Blocks until all members' tasks have ended.
   * 
   * Note that there could be odd thread interactions, as the threads of the
   * members are not locked during this process.
   */
  @Override
  public synchronized void join () throws InterruptedException {
    for (U member_i : _members) {
      member_i.join ();
    }
  }

  /**
   * Send interrupt signal to each member.
   */
  @Override
  public void interrupt () {
    for (U member_i : _members) {
      member_i.interrupt ();
    }
  }

  /**
   * Throws an UnsupportedOperationException
   */
  @Override
  public State getThreadState () {
    throw new UnsupportedOperationException ("If you can think of a meaningful way to aggregate this information across threads, feel free to add an implementation here.");
  }

  /**
   * Throws an UnsupportedOperationException. Use getErrors instead.
   */
  @Override
  public Throwable getError () {
    throw new UnsupportedOperationException ("If you can think of a meaningful way to aggregate this information across threads, feel free to add an implementation here.");
  }

  @Override
  public synchronized List<Throwable> getErrors () {
    List<Throwable> errors = new ArrayList<Throwable> ();
    for (U member_i : _members) {
      Throwable e = member_i.getError ();
      if (e != null) {
        errors.add (e);
      }
    }
    return errors;
  }

  @Override
  public int size () {
    return _nMembers;
  }

  @Override
  public boolean isEmpty () {
    return _members.isEmpty ();
  }

  @Override
  public boolean contains (Object o) {
    return _members.contains (o);
  }

  @Override
  public Iterator<U> iterator () {
    return _members.iterator ();
  }

  @Override
  public Object[] toArray () {
    return _members.toArray ();
  }

  @Override
  public <T> T[] toArray (T[] a) {
    return _members.toArray (a);
  }

  @Override
  public boolean add (U e) {
    e.setTimingRecordQueue (_timingRecordQueue);
    e.setConfigurationSource (getConfigurationSource ());
    return _members.add (e);
  }

  @SuppressWarnings ("unchecked")
  @Override
  public boolean remove (Object o) {
    boolean ans;
    if (ans = _members.remove (o)) {
      ((U) o).setTimingRecordQueue (null);
    }
    return ans;
  }

  @Override
  public boolean containsAll (Collection<?> c) {
    return _members.containsAll (c);
  }

  @Override
  public boolean addAll (Collection<? extends U> c) {
    boolean ans = false;
    for (U member_i : c) {
      if (!_members.contains (member_i)) {
        _members.add (member_i);
        member_i.setTimingRecordQueue (_timingRecordQueue);
        member_i.setConfigurationSource (getConfigurationSource ());
        ans = true;
      }
    }
    return ans;
  }

  @Override
  public boolean addAll (int index, Collection<? extends U> c) {
    boolean ans = false;
    int i = index;
    for (U member_i : c) {
      if (!_members.contains (member_i)) {
        _members.add (i, member_i);
        i++;
        member_i.setTimingRecordQueue (_timingRecordQueue);
        member_i.setConfigurationSource (getConfigurationSource ());
        ans = true;
      }
    }
    return ans;
  }

  @SuppressWarnings ("unchecked")
  @Override
  public boolean removeAll (Collection<?> c) {
    boolean ans = false;
    for (Object member_i : c) {
      final boolean ans_i = _members.remove (member_i);
      if (ans_i) {
        ((U) member_i).setTimingRecordQueue (null);
        ans = true;
      }
    }
    return ans;
  }

  @Override
  public boolean retainAll (Collection<?> c) {
    boolean ans = false;
    Set<U> toRemove = new HashSet<U> ();
    for (U member_i : _members) {
      if (!c.contains (member_i)) {
        ans = true;
        member_i.setTimingRecordQueue (null);
        toRemove.add (member_i);
      }
    }
    for (U member_i : toRemove) {
      _members.remove (member_i);
    }
    return ans;
  }

  @Override
  public void clear () {
    for (U member_i : _members) {
      member_i.setTimingRecordQueue (null);
    }
    _members.clear ();
  }

  @Override
  public U get (int index) {
    return _members.get (index);
  }

  @Override
  public U set (int index, U element) {
    U x = _members.set (index, element);
    if (x != null && !x.equals (element)) {
      x.setTimingRecordQueue (_timingRecordQueue);
    }
    return x;
  }

  @Override
  public void add (int index, U element) {
    _members.add (index, element);
    element.setTimingRecordQueue (_timingRecordQueue);
    element.setConfigurationSource (getConfigurationSource ());
  }

  @Override
  public U remove (int index) {
    U x = _members.remove (index);
    if (!_members.contains (x)) {
      x.setTimingRecordQueue (null);
    }
    return x;
  }

  @Override
  public int indexOf (Object o) {
    return _members.indexOf (o);
  }

  @Override
  public int lastIndexOf (Object o) {
    return _members.lastIndexOf (o);
  }

  @Override
  public ListIterator<U> listIterator () {
    return _members.listIterator ();
  }

  @Override
  public ListIterator<U> listIterator (int index) {
    return _members.listIterator (index);
  }

  @Override
  public List<U> subList (int fromIndex, int toIndex) {
    return _members.subList (fromIndex, toIndex);
  }

  @Override
  public void setNMembers (int nMembers) {
    _nMembers = nMembers;
  }

  @Override
  public int getNMembers () {
    return _nMembers;
  }

  @Override
  public long getExponentialRandom (long ms) {
    throw new UnsupportedOperationException ("This is meant to be called from within the first person user's thread.");
  }

  @Override
  public void waitRandom (long ms) throws InterruptedException {
    throw new UnsupportedOperationException ("This is meant to be called from within the first person user's thread.");
  }

  @Override
  public <T extends U> void setUserFactory (UserFactory<T> factory) {
    _factory = factory;

  }

  @Override
  public UserFactory<? extends U> getUserFactory () {
    return _factory;
  }

  @Override
  public String getName () {
    return _name;
  }

  @Override
  public void setTimingRecordQueue (Queue<InteractionTimingRecord> queue) {
    _timingRecordQueue = queue;
    for (U member_i : _members) {
      member_i.setTimingRecordQueue (queue);
    }
  }

  @Override
  public void setConfigurationSource (Properties configurationSource) {
    super.setConfigurationSource (configurationSource);
    for (U member_i : _members) {
      member_i.setConfigurationSource (configurationSource);
    }
  }
}
