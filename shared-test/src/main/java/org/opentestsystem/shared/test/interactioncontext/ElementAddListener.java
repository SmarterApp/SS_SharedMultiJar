/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.interactioncontext;

import java.io.IOException;

import net.sourceforge.htmlunit.corejs.javascript.Function;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gargoylesoftware.htmlunit.SgmlPage;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.html.DomChangeEvent;
import com.gargoylesoftware.htmlunit.html.DomChangeListener;
import com.gargoylesoftware.htmlunit.html.DomElement;
import com.gargoylesoftware.htmlunit.html.DomNode;
import com.gargoylesoftware.htmlunit.html.HtmlImage;
import com.gargoylesoftware.htmlunit.html.HtmlLink;
import com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine;
import com.gargoylesoftware.htmlunit.javascript.PostponedAction;
import com.gargoylesoftware.htmlunit.javascript.host.Event;
import com.gargoylesoftware.htmlunit.javascript.host.html.HTMLImageElement;
import com.gargoylesoftware.htmlunit.javascript.host.html.HTMLLinkElement;

public class ElementAddListener implements DomChangeListener
{
  private static final long   serialVersionUID = 1L;
  private static final Logger _logger          = LoggerFactory.getLogger (ElementAddListener.class);
//  private static long         _pcount          = 0L;

  @Override
  public void nodeAdded (DomChangeEvent event) {
    final DomNode changedNode = event.getChangedNode ();
    if (changedNode instanceof DomElement) {
      final DomElement el = (DomElement) changedNode;
      _logger.trace ("Dom change event involving <{}> element", el.getTagName ());
      SgmlPage page = changedNode.getPage ();
      WebClient client = page.getWebClient ();
      JavaScriptEngine engine = client.getJavaScriptEngine ();

      // TODO: Remove this code once extra-paragraphs bug is fixed
      // Log number of paragraphs generated
      //
      // This code is useful for debugging an infinite recursion that is being
      // generated when
      // updating the innerHtml of an element in the course of inserting
      // internationalization
      // content in the ReviewShell page.
      // for (@SuppressWarnings ("unused") Object p : el.getByXPath
      // ("descendant-or-self::p")) {
      // if ( (++_pcount) % 100 == 0) {
      // _logger.debug ("PARAGRAPH {} ADDED", _pcount);
      // if (_pcount >= 300 ) {
      // _logger.error ("Too many paragraphs added!");
      // for ( StackTraceElement frame_i : Thread.currentThread ().getStackTrace
      // () ) {
      // _logger.error ("    {}.{}() line {} ({})", frame_i.getClassName (),
      // frame_i.getMethodName (), frame_i.getLineNumber (), frame_i.getFileName
      // ());
      // }
      // System.exit (1);
      // }
      // }
      // }

      for (Object node : el.getByXPath ("descendant-or-self::img|descendant-or-self::link")) {
        if (node instanceof HtmlImage) {
          final HtmlImage img = (HtmlImage) node;
          PostponedAction action = new PostponedAction (page)
          {
            @Override
            public void execute () {
              _logger.debug ("Loading image: {}", img.getSrcAttribute ());
              try {
                img.getImageReader ();
                _logger.debug ("Calling onload handlers for image: {}", img.getSrcAttribute ());
                img.doOnLoad ();
              } catch (IOException e) {
                if (_logger.isDebugEnabled ()) {
                  _logger.warn ("Image {} not loaded", img.getSrcAttribute (), e);
                }
                else {
                  _logger.warn ("Image {} not loaded", img.getSrcAttribute ());
                }
                final String handlerName = "onerror";
                final String eventName = "error";
                final HTMLImageElement imgElement = (HTMLImageElement) img.getScriptObject ();
                Object handler = imgElement.get (handlerName, imgElement);
                if (handler instanceof Function) {
                  _logger.debug ("Calling {} handlers for: {}", handlerName, img.getSrcAttribute ());
                  imgElement.setEventHandler (handlerName, (Function) handler);
                  final Event js_event = new Event (img, eventName);
                  imgElement.executeEvent (js_event);
                }
              }
            }
          };
          if (engine.isScriptRunning ()) {
            _logger.debug ("Scheduling load of image: {}", img.getSrcAttribute ());
            client.getJavaScriptEngine ().addPostponedAction (action);
          }
          else {
            try {
              action.execute ();
            } catch (Exception e) {
              _logger.warn ("Image {} not loaded", img.getSrcAttribute (), e);
              final String handlerName = "onerror";
              final String eventName = "error";
              final HTMLImageElement imgElement = (HTMLImageElement) img.getScriptObject ();
              Object handler = imgElement.get (handlerName, imgElement);
              if (handler instanceof Function) {
                _logger.debug ("Calling {} handlers for: {}", handlerName, img.getSrcAttribute ());
                imgElement.setEventHandler (handlerName, (Function) handler);
                final Event js_event = new Event (img, eventName);
                imgElement.executeEvent (js_event);
              }
            }
          }
        }
        else if (node instanceof HtmlLink) {
          final HtmlLink link = (HtmlLink) node;
          if ("stylesheet".equals (link.getRelAttribute ())) {
            _logger.debug ("Loading stylesheet link: {}", link.getHrefAttribute ());
            String handlerName = "onload";
            String eventName = "load";
            try {
              link.getWebResponse (true);
            } catch (IOException e) {
              _logger.warn ("CSS {} not loaded", link.getHrefAttribute (), e);

              handlerName = "onerror";
              eventName = "error";
            }
            final HTMLLinkElement linkElement = (HTMLLinkElement) link.getScriptObject ();
            Object handler = linkElement.get (handlerName, linkElement);
            if (handler instanceof Function) {
              _logger.debug ("Calling {} handlers for: {}", handlerName, link.getHrefAttribute ());
              linkElement.setEventHandler (handlerName, (Function) handler);
              final Event js_event = new Event (link, eventName);
              linkElement.executeEvent (js_event);
            }
          }
        }
        else {
          _logger.warn ("Unexpected node type found. Not calling onLoad", node);
        }
      }
    }
  }

  @Override
  public void nodeDeleted (DomChangeEvent event) {
    // Je ne fais rien
  }

}
