/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.pagedriver;

import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.opentestsystem.shared.test.interactioncontext.HtmlUnitInteractionResponse;

import com.gargoylesoftware.htmlunit.ElementNotFoundException;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.html.DomNode;
import com.gargoylesoftware.htmlunit.html.HtmlElement;
import com.gargoylesoftware.htmlunit.html.HtmlPage;

/**
 * @author jmambo
 * 
 */
public abstract class AbstractHtmlPageDriver extends HtmlUnitPageDriver
{

  @SuppressWarnings ("unchecked")
  protected List<String> getByXPath (String xpathExpr) {
    final List<?> nameList = ((HtmlPage) getPage ()).getByXPath (xpathExpr);
    List<?> valueList = new ArrayList<Object> (nameList);
    List<String> collectedValues = new ArrayList<String> ();
    for (DomNode node : (List<DomNode>) valueList) {
      collectedValues.add (node.getNodeValue ());
    }
    return collectedValues;
  }

  public void assertStatusOk () {
    final HtmlPage page = (HtmlPage) getPage ();
    int statusCode = page.getWebResponse ().getStatusCode ();
    assertEquals ("Assertion failed: wrong status", 200, statusCode);
  }
  
  @Override
  public HtmlPage getPage () {
    return (HtmlPage) super.getPage ();
  }

  public HtmlUnitInteractionResponse clickAndWait (HtmlElement button, long timeout) throws IOException {
    final WebClient client = getPage().getWebClient ();
    button.click ();
    client.waitForBackgroundJavaScriptStartingBefore (1000);
    return getInteractionContext ().buildResponse (client.getCurrentWindow ().getEnclosedPage (), timeout);
  }
  
  protected HtmlElement getElementByIdOrNull( String id ) {
    try {
      return getPage ().getHtmlElementById (id);
    }
    catch (ElementNotFoundException e) {
      return null;
    }
  }

}
