/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.interactioncontext;

import org.opentestsystem.shared.test.api.InteractionResponse;
import org.opentestsystem.shared.test.api.PageDriver;
import org.opentestsystem.shared.test.pagedriver.HtmlUnitPageDriver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gargoylesoftware.htmlunit.Page;
import com.gargoylesoftware.htmlunit.html.HtmlPage;

public class HtmlUnitInteractionResponse implements InteractionResponse<HtmlUnitInteractionResponse>
{
  private static final Logger _logger = LoggerFactory.getLogger(HtmlUnitInteractionResponse.class);
  private final Page _page;
  private final HtmlUnitInteractionContext _interactionContext;
  private final long _timeout;
  private final long _t_timeout;

  public HtmlUnitInteractionResponse (HtmlUnitInteractionContext interactionContext, Page page, long timeout, long t_timeout) {
    _page = page;
    _interactionContext = interactionContext;
    _timeout = timeout;
    _t_timeout = t_timeout;
  }

  public Page getPage () {
    return _page;
  }

  @SuppressWarnings ("unchecked")
  @Override
  public <T extends PageDriver<HtmlUnitInteractionResponse>> T expecting (Class<T> pageType, boolean ensureLoaded) throws Throwable {
    try {
      final T pageDriverFactory = pageType.getDeclaredConstructor ().newInstance ();
      final T pageDriver = (T) pageDriverFactory.init (this, ensureLoaded);
      if (ensureLoaded) {
        pageDriver.assertExpectedPage ();
      }
      _interactionContext.setCurrentPage((HtmlUnitPageDriver) pageDriver);
      return pageDriver;
    } catch (Throwable t) {
      if (_page instanceof HtmlPage) {
        _logger.info ("Exception raised while reading this page");
        _logger.info (((HtmlPage) _page).asXml ());
      } else {
        _logger.info ("Exception raised while reading NON-HTML page");
        _logger.info (_page.getWebResponse ().getContentAsString ());
      }
      throw t;
    }
  }

  @Override
  public <T extends PageDriver<HtmlUnitInteractionResponse>> T expecting (Class<T> pageType) throws Throwable {
    return expecting (pageType, true);
  }

  @Override
  public HtmlUnitInteractionContext getInteractionContext () {
    return _interactionContext;
  }
  
  public long getTimeout() {
    return _timeout;
  }
  
  public long getTimeoutTime() {
    return _t_timeout;
  }
  
  public boolean isTimedOut() {
    return System.currentTimeMillis () > _t_timeout;
  }
}
