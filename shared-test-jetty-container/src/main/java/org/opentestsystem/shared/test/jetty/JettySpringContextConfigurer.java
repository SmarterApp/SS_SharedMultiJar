/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.jetty;

import java.util.EventListener;

import org.eclipse.jetty.webapp.Configuration;
import org.eclipse.jetty.webapp.WebAppContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;

/**
 * Class used internally to the JettyWebApplication container to hack the root
 * Spring context
 * 
 * @author temp_dmenes
 * 
 */
public class JettySpringContextConfigurer implements Configuration
{

  private final ApplicationContext _externalContext;

  private final ClassLoader        _classloaderToUse;

  private static final Logger      _logger = LoggerFactory.getLogger (JettySpringContextConfigurer.class);

  public JettySpringContextConfigurer (ApplicationContext externalContext, ClassLoader classloader ) {
    _externalContext = externalContext;
    _classloaderToUse = classloader;
  }

  @Override
  public void configure (final WebAppContext context) throws Exception {
    // TODO: Should be able to block the processing of an existing Spring
    // ContextLoaderListener in the web.xml

    _logger.debug ("Adding listener to configure Jetty container root Spring context");

    // Remove any configured Spring ContextLoaderListener and then insert our
    // own.
    // Our version is going to inherit from the external Spring context.

    // This code doesn't work, because the webapp eventlisteners array isn't
    // created until the
    // webapp container is started.

    // final Class<?> classToFind = context.loadClass
    // ("org.springframework.web.context.ContextLoaderListener");
    // for (EventListener l : context.getEventListeners ()) {
    // if (!(classToFind.isInstance (l))) {
    // listeners.add (l);
    // _logger.debug( "Preserving listener of class {}", l.getClass ().getName
    // ());
    // }
    // else {
    // _logger.debug( "Dropping listener of class {}", l.getClass ().getName
    // ());
    // }
    // }

    // final List<EventListener> listeners = new ArrayList<EventListener> ();
    // listeners.add (new InheritingSpringContextLoaderListener
    // (_externalContext));
    // context.setEventListeners (listeners.toArray (new
    // EventListener[listeners.size ()]));

    Class<?> listenerClass = _classloaderToUse.loadClass ("org.opentestsystem.shared.test.jetty.InheritingSpringContextLoaderListener" );
    Object instance = listenerClass.getConstructors ()[0].newInstance (_externalContext);
    
    context.addEventListener ((EventListener) instance);
  }

  @Override
  public void preConfigure (WebAppContext context) throws Exception {
  }

  @Override
  public void postConfigure (WebAppContext context) throws Exception {
  }

  @Override
  public void deconfigure (WebAppContext context) throws Exception {
  }

  @Override
  public void destroy (WebAppContext context) throws Exception {
  }

  @Override
  public void cloneConfigure (WebAppContext template, WebAppContext context) throws Exception {
  }
}
