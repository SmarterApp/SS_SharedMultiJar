/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.logging.log4j;

import java.io.Closeable;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;

import org.apache.log4j.AppenderSkeleton;
import org.apache.log4j.Layout;
import org.apache.log4j.MDC;
import org.apache.log4j.PatternLayout;
import org.apache.log4j.spi.LoggingEvent;

public abstract class ThreadFileAppender extends AppenderSkeleton
{

  private final ThreadLocal<ContextStatus> threadStatus             = new ThreadLocal<> ();

  protected String                         filenamePattern          = null;
  protected Layout                         fileNamePatternConverter = null;

  protected enum ContextStatus {
    SKIP,
    OPEN,
    CLOSED
  }

  public ThreadFileAppender () {
    super ();
  }

  public ThreadFileAppender (boolean isActive) {
    super (isActive);
  }

  @Override
  protected void append (LoggingEvent event) {

    // Is this the first time we have seen this context?
    ContextStatus status = getStatus ();
    if (status == null) {
      // Skip if no filename pattern was given
      if (fileNamePatternConverter == null) {
        setStatus (ContextStatus.SKIP);
        return;
      }

      // OK, I guess we are going to do it. Open the file.
      String filename = fileNamePatternConverter.format (event);
      try {
        ensureDirectories (filename);
        final OutputStream stream = new FileOutputStream (filename);
        final Writer writer = new OutputStreamWriter (stream);
        MDC.put ("stream", stream);
        MDC.put ("writer", writer);
        setStatus (ContextStatus.OPEN);
      } catch (IOException e) {
        setStatus (ContextStatus.SKIP);
        // Do nothing--hopefully this is being logged by some other logger!!!
      }
      status = threadStatus.get ();
    }

    // What have we decided to do in this context?
    switch (status) {
    case SKIP:
      break;

    case CLOSED:
      break;

    case OPEN:
      final Writer writer = (Writer) MDC.get ("writer");
      final FileOutputStream stream = (FileOutputStream) MDC.get ("stream");
      try {
        writer.write (this.layout.format (event));

        if (layout.ignoresThrowable ()) {
          String[] s = event.getThrowableStrRep ();
          if (s != null) {
            int len = s.length;
            for (int i = 0; i < len; i++) {
              writer.write (s[i]);
              writer.write (Layout.LINE_SEP);
            }
          }
        }
        writer.flush();
        if (MDC.get ("close") != null) {
          closeQuietly (writer);
          closeQuietly (stream);
          setStatus (ContextStatus.CLOSED);
        }
      } catch (IOException e) {
        closeQuietly (writer);
        closeQuietly (stream);
        setStatus (ContextStatus.CLOSED);
      }
      break;
    }

  }

  @Override
  public void activateOptions () {
    super.activateOptions ();

    // Create converter for filename pattern
    if (!isEmpty (filenamePattern)) {
      fileNamePatternConverter = new PatternLayout (filenamePattern);
    }
  }

  public void setFilenamePattern (String filenamePattern) {
    this.filenamePattern = filenamePattern;
  }

  public String getFilenamePattern () {
    return this.filenamePattern;
  }

  @Override
  public void close () {
  }

  @Override
  public boolean requiresLayout () {
    return true;
  }

  protected void closeQuietly (Closeable c) {
    if (c == null)
      return;
    try {
      c.close ();
    } catch (Throwable t) {
      // Do nothing;
    }
  }

  protected boolean isEmpty (Object s) {
    if (s == null)
      return true;
    return s.toString ().equals ("");
  }

  protected void ensureDirectories (String filename) throws IOException {
    File dir = new File (filename).getParentFile ();
    if (!dir.exists ())
      dir.mkdirs ();
  }

  protected ContextStatus getStatus () {
    return threadStatus.get ();
  }

  protected void setStatus (ContextStatus status) {
    threadStatus.set (status);
  }

}
