/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.unittest.db;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;

import javax.sql.DataSource;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.text.StrSubstitutor;
import org.opentestsystem.shared.test.api.LifecycleResource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DBScriptExecutor implements LifecycleResource
{
  private static final Logger _logger = LoggerFactory.getLogger (DBScriptExecutor.class);

  private DataSource          dataSource;
  private Properties          scriptProperties;
  private String              schemaDefinitionName;
  private String              dbDialect;
  private Boolean             enabled = true;

  private String              startupBeforeDependenciesScripts;
  private String              startupAfterDependenciesScripts;
  private String              betweenTestsBeforeDependenciesScripts;
  private String              betweenTestsAfterDependenciesScripts;
  private String              shutdownBeforeDependenciesScripts;
  private String              shutdownAfterDependenciesScripts;

  private String[]            startupBDList;
  private String[]            startupADList;
  private String[]            betweenTestsBDList;
  private String[]            betweenTestsADList;
  private String[]            shutdownBDList;
  private String[]            shutdownADList;

  private String              scriptPath;

  public boolean isEnabled () {
    return enabled;
  }

  public void setEnabled (boolean value) {
    enabled = value;
  }

  public String getBetweenTestsBeforeDependenciesScripts () {
    return betweenTestsBeforeDependenciesScripts;
  }

  public void setBetweenTestsBeforeDependenciesScripts (String betweenTestsBeforeDependenciesScripts) {
    this.betweenTestsBeforeDependenciesScripts = betweenTestsBeforeDependenciesScripts;
    betweenTestsBDList = StringUtils.split (betweenTestsBeforeDependenciesScripts, " ,");
  }

  public String getBetweenTestsAfterDependenciesScripts () {
    return betweenTestsAfterDependenciesScripts;
  }

  public void setBetweenTestsAfterDependenciesScripts (String betweenTestsAfterDependenciesScripts) {
    this.betweenTestsAfterDependenciesScripts = betweenTestsAfterDependenciesScripts;
    betweenTestsADList = StringUtils.split (betweenTestsAfterDependenciesScripts, " ,");
  }

  public String getShutdownBeforeDependenciesScripts () {
    return shutdownBeforeDependenciesScripts;
  }

  public void setShutdownBeforeDependenciesScripts (String shutdownBeforeDependenciesScripts) {
    this.shutdownBeforeDependenciesScripts = shutdownBeforeDependenciesScripts;
    shutdownBDList = StringUtils.split (shutdownBeforeDependenciesScripts, " ,");
  }

  public String getShutdownAfterDependenciesScripts () {
    return shutdownAfterDependenciesScripts;
  }

  public void setShutdownAfterDependenciesScripts (String shutdownAfterDependenciesScripts) {
    this.shutdownAfterDependenciesScripts = shutdownAfterDependenciesScripts;
    shutdownADList = StringUtils.split (shutdownAfterDependenciesScripts, " ,");
  }

  public String getStartupBeforeDependenciesScripts () {
    return startupBeforeDependenciesScripts;
  }

  public void setStartupBeforeDependenciesScripts (String startupBeforeDependenciesScripts) {
    this.startupBeforeDependenciesScripts = startupBeforeDependenciesScripts;
    startupBDList = StringUtils.split (startupBeforeDependenciesScripts, " ,");
  }

  public String getStartupAfterDependenciesScripts () {
    return startupAfterDependenciesScripts;
  }

  public void setStartupAfterDependenciesScripts (String startupAfterDependenciesScripts) {
    this.startupAfterDependenciesScripts = startupAfterDependenciesScripts;
    startupADList = StringUtils.split (startupAfterDependenciesScripts, " ,");
  }

  public String getSchemaDefinitionName () {
    return schemaDefinitionName;
  }

  public void setSchemaDefinitionName (String schemaDefinitionName) {
    this.schemaDefinitionName = schemaDefinitionName;
  }

  public String getDbDialect () {
    return dbDialect;
  }

  public void setDbDialect (String dbDialect) {
    this.dbDialect = dbDialect;
  }

  public DataSource getDataSource () {
    return dataSource;
  }

  public void setDataSource (DataSource dataSource) {
    this.dataSource = dataSource;
  }

  public Properties getScriptProperties () {
    return scriptProperties;
  }

  public void setScriptProperties (Properties properties) {
    this.scriptProperties = properties;
  }

  private void buildScriptsPath () {
    scriptPath = new StringBuilder ("sql/")
        .append (dbDialect).append ('/')
        .append (schemaDefinitionName).append ('/')
        .toString ();
  }

  private String delimiter = ";";

  private void executeOneScript (String fullPath, Connection connection) throws Exception {
    ClassLoader cl = DBScriptExecutor.class.getClassLoader ();
    InputStream stream = cl.getResourceAsStream (fullPath);
    StringBuilder cmd = new StringBuilder ();
    if (stream != null) {
      try (
          InputStreamReader reader = new InputStreamReader (stream);
          BufferedReader lineReader = new BufferedReader (reader)) {

        String line = lineReader.readLine ();
        while (line != null) {
          // line = line.trim ();
          line = modifyLine (line);
          if (line != null) {
            if (line.trim ().endsWith (this.delimiter)) {
              if (";".equalsIgnoreCase (this.delimiter) == false) {
                line = StringUtils.replace (line, this.delimiter, ";");
              }
              cmd.append (line);
              cmd.append ('\n');
              connection.createStatement ().execute (cmd.toString ());
              cmd.setLength (0);
            } else {
              cmd.append (line);
              cmd.append ('\n');
            }
          }

          line = lineReader.readLine ();
        }

      } catch (IOException e) {
        _logger.error (String.format ("IOException: %s", e.getMessage ()));
        throw e;
      } catch (SQLException se) {
        _logger.error (String.format ("Exception: %s, Original sql statement: %s", se.getMessage (), cmd.toString ()));
        throw se;
      } finally {
        stream.close ();
      }
    }
  }

  private String modifyLine (String line) {

    if (line.trim ().startsWith ("DELIMITER") || line.trim ().startsWith ("delimiter")) {
      String ln[] = StringUtils.split (line, " ");
      if (ln.length > 1)
        this.delimiter = ln[1];
      return null;
    }
    String ll = StrSubstitutor.replace (line, scriptProperties);

    return ll;
  }

  private void runScriptList (String[] scriptList) throws Exception {
    if (!enabled) {
      return;
    }
    if (scriptList != null) {
      try (Connection connection = dataSource.getConnection ()) {

        for (String script : scriptList) {
          String fullPath = new StringBuilder (scriptPath).append (script).toString ();
          executeOneScript (fullPath, connection);
        }
      }
    }
  }

  @Override
  public void startupBeforeDependencies () throws Exception {

    buildScriptsPath ();
    runScriptList (startupBDList);
  }

  @Override
  public void startupAfterDependencies () throws Exception {
    runScriptList (startupADList);
  }

  @Override
  public void betweenTestsBeforeDependencies () throws Exception {
    runScriptList (betweenTestsBDList);

  }

  @Override
  public void betweenTestsAfterDependencies () throws Exception {
    runScriptList (betweenTestsADList);
  }

  @Override
  public void shutdownBeforeDependencies () throws Exception {
    runScriptList (shutdownBDList);
  }

  @Override
  public void shutdownAfterDependencies () throws Exception {
    runScriptList (shutdownADList);
  }

  @Override
  public void afterTestBeforeDependencies () throws Exception {
  }

  @Override
  public void afterTestAfterDependencies () throws Exception {
  }

}
