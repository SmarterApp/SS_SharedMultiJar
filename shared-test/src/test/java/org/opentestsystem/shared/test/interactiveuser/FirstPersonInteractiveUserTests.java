/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.interactiveuser;

import javax.annotation.Resource;

import static org.junit.Assert.*;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.shared.test.LifecycleManagingTestRunner;
import org.opentestsystem.shared.test.api.user.FirstPersonInteractiveUser;
import org.opentestsystem.shared.test.api.userstory.FirstPersonUserStory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;

@RunWith (LifecycleManagingTestRunner.class)
@ContextConfiguration ("test-context.xml")
public class FirstPersonInteractiveUserTests
{

  @SuppressWarnings ("rawtypes")
  @Resource (name = "refUser")
  private FirstPersonInteractiveUser refUser;

  @SuppressWarnings ("rawtypes")
  @Resource (name = "classUser")
  private FirstPersonInteractiveUser classUser;

  @SuppressWarnings ("rawtypes")
  @Resource (name = "instanceUser")
  private FirstPersonInteractiveUser instanceUser;

  @Autowired
  private ApplicationContext         applicationContext;

  @Test
  @DirtiesContext
  public void refUserTest () throws Throwable {
    long start = System.currentTimeMillis ();
    refUser.doScriptSynchronous ();
    long elapsed = System.currentTimeMillis () - start;
    assertTrue (900 < elapsed && elapsed < 1100);
  }

  @Test
  @DirtiesContext
  public void refUserTestAsync () throws Throwable {
    long start = System.currentTimeMillis ();
    refUser.startScript ();
    long elapsed1 = System.currentTimeMillis () - start;
    assertTrue (elapsed1 < 100);
    refUser.join ();
    long elapsed2 = System.currentTimeMillis () - start;
    assertTrue (900 < elapsed2 && elapsed2 < 1100);
  }

  @SuppressWarnings ("unchecked")
  @Test
  @DirtiesContext
  public void classUserTest () throws Throwable {
    classUser.setScriptClass (DelayUserStory.class);
    long start = System.currentTimeMillis ();
    classUser.doScriptSynchronous ();
    long elapsed = System.currentTimeMillis () - start;
    assertTrue (900 < elapsed && elapsed < 1100);
  }

  @SuppressWarnings ("unchecked")
  @Test
  @DirtiesContext
  public void instanceUserTest () throws Throwable {
    FirstPersonUserStory<?> story = new DelayUserStory ();
    story.setApplicationContext (applicationContext);
    instanceUser.setScript (story);
    long start = System.currentTimeMillis ();
    instanceUser.doScriptSynchronous ();
    long elapsed = System.currentTimeMillis () - start;
    assertTrue (900 < elapsed && elapsed < 1100);
  }

}
