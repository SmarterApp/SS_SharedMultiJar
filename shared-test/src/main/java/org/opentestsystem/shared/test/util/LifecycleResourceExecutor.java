/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.util;

import java.util.List;

import org.opentestsystem.shared.test.api.LifecycleResource;
import org.springframework.beans.PropertyValue;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.config.ConstructorArgumentValues.ValueHolder;
import org.springframework.beans.factory.config.RuntimeBeanReference;
import org.springframework.beans.factory.support.BeanDefinitionRegistry;
import org.springframework.context.ApplicationContext;

/**
 * @author mpatel
 * 
 */
public class LifecycleResourceExecutor
{

  public void executeLifeCycleResourceBeforeDependencies (List<String> lifeCycleResourcesName, ApplicationContext context, List<LifecycleResource> afterMethodExecutionList,
      LifecycleResourceMethods lifeCycleResourceMethod)
      throws Exception {
    while (!lifeCycleResourcesName.isEmpty ()) {
      executeBeforeDependencies (lifeCycleResourcesName.get (0), lifeCycleResourcesName, context, afterMethodExecutionList, lifeCycleResourceMethod);
    }
  }

  private void executeBeforeDependencies (String beanName, List<String> lifeCycleResourcesName, ApplicationContext context, List<LifecycleResource> afterMethodExecutionList,
      LifecycleResourceMethods lifeCycleResourceMethod)
      throws Exception {
    BeanDefinitionRegistry beanDefinitionRegistry = (BeanDefinitionRegistry) context;
    BeanDefinition beanDefination = beanDefinitionRegistry.getBeanDefinition (beanName);
    if (beanDefination.getConstructorArgumentValues () != null && beanDefination.getConstructorArgumentValues ().getGenericArgumentValues () != null) {
      for (ValueHolder value : beanDefination.getConstructorArgumentValues ().getGenericArgumentValues ()) {
        if (value.getValue () instanceof RuntimeBeanReference) {
          String constArgBeanName = ((RuntimeBeanReference) value.getValue ()).getBeanName ();
          if(context.getBean (constArgBeanName) instanceof LifecycleResource) {
            executeBeforeDependencies (constArgBeanName, lifeCycleResourcesName, context, afterMethodExecutionList, lifeCycleResourceMethod);
          }
        }
      }
    }
    if (beanDefination.getPropertyValues () != null && beanDefination.getPropertyValues ().getPropertyValueList () != null) {
      for (PropertyValue propertyValue : beanDefination.getPropertyValues ().getPropertyValueList ()) {
        if (propertyValue.getValue () instanceof RuntimeBeanReference) {
          RuntimeBeanReference beanRef = (RuntimeBeanReference)propertyValue.getValue ();
          if(context.containsBean (beanRef.getBeanName ()) && context.getBean (beanRef.getBeanName ()) instanceof LifecycleResource) {
            executeBeforeDependencies (beanRef.getBeanName (), lifeCycleResourcesName, context, afterMethodExecutionList, lifeCycleResourceMethod);
          }
        }
      }
    }
    if (beanDefination.getDependsOn () != null) {
      for (String dependentBeanName : beanDefination.getDependsOn ()) {
        if(context.getBean (dependentBeanName) instanceof LifecycleResource) {
          executeBeforeDependencies (dependentBeanName, lifeCycleResourcesName, context, afterMethodExecutionList, lifeCycleResourceMethod);
        }
      }
    }
    LifecycleResource lifeCycleResource = (LifecycleResource) context.getBean (beanName);
    if (lifeCycleResourcesName.contains (beanName)) {
      executeBeforeMethod (lifeCycleResource, lifeCycleResourceMethod);
      afterMethodExecutionList.add (lifeCycleResource);
      lifeCycleResourcesName.remove (beanName);
    }
  }

  private void executeBeforeMethod (LifecycleResource lifeCycleResource, LifecycleResourceMethods lifeCycleResourceMethod) throws Exception {
    switch (lifeCycleResourceMethod) {
    case startupBeforeDependencies:
      lifeCycleResource.startupBeforeDependencies ();
      break;
    case betweenTestsBeforeDependencies:
      lifeCycleResource.betweenTestsBeforeDependencies ();
      break;
    case afterTestBeforeDependencies:
      lifeCycleResource.afterTestBeforeDependencies ();
      break;
    case shutdownBeforeDependencies:
      lifeCycleResource.shutdownBeforeDependencies ();
      break;
    default:
      throw new IllegalArgumentException ("Only before Dependancy Methods are supported");
    }
  }
}
