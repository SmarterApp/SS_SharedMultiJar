/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.logging.log4j;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

import org.apache.log4j.MDC;
import org.apache.log4j.spi.LoggingEvent;

/**
 * Log4J appender to create a new log file for each request.
 * 
 * Use this appender in conjunction with the
 * AIR.Common.Web.Session.HttpRequestLoggerInitializerFilter
 * 
 * There are two parameters that should be specified in the log4j configuration.
 * 
 * filenamePattern is a pattern from which the filename will be derived. This
 * pattern can contain <code>%XX{}</code> format specifiers to interpolate
 * variables from the debugging context. Some of these specifiers are:
 * 
 * <h3>For per-request logging (defined by HttpRequestLoggerInitializerFilter)</h3>
 * 
 * <code>%X{requestSequence}</code>, <code>%X{requestTime}</code>,
 * <code>%X{requestPath}</code>, <code>%X{safeRequestPath}</code> or
 * <code>%X{prefix}</code>.
 * 
 * If used, the prefix should be specified in web.xml as an init-param of the
 * <code>HttpRequestLoggerInitializerFilter</code>.
 * 
 * @author temp_dmenes
 * 
 */
public class PerRequestFileAppender extends ThreadFileAppender
{

  private String excludePatternString = null;
  List<Pattern>  excludePatterns      = new ArrayList<Pattern> ();

  public PerRequestFileAppender () {
  }

  public PerRequestFileAppender (boolean isActive) {
    super (isActive);
  }

  @Override
  protected void append (LoggingEvent event) {

    // Has any request data been added to the context? If not, return.
    String requestSequence = (String) MDC.get ("requestSequence");
    String requestTime = (String) MDC.get ("requestTime");
    String requestPath = (String) MDC.get ("requestPath");

    if (requestSequence == null || requestTime == null || requestPath == null) {
      return;
    }

    // Is this the first time we have seen this context?
    if (getStatus () == null) {

      // Skip if any of the exclude patterns match.
      for (Pattern regex : excludePatterns) {
        if (regex.matcher (requestPath).matches ()) {
          setStatus (ContextStatus.SKIP);
          return;
        }
      }
    }
    super.append (event);
    if (ContextStatus.CLOSED.equals (getStatus ())) {
      setStatus (null);
    }
  }

  @Override
  public void activateOptions () {
    super.activateOptions ();

    // Create regex patterns for exclusion filters.
    if (!isEmpty (excludePatternString)) {
      for (String regex : excludePatternString.split (",")) {
        Pattern pattern = Pattern.compile (regex);
        excludePatterns.add (pattern);
      }
    }
  }

  public void setExcludePatterns (String filterPatterns) {
    this.excludePatternString = filterPatterns;
  }

  public String getExcludePatterns () {
    return excludePatternString;
  }

}
