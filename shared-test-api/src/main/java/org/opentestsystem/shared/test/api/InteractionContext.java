/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.api;

import java.net.URL;
import java.util.Queue;

import org.opentestsystem.shared.test.statistics.InteractionTimingRecord;

/**
 * Abstraction of a web browser
 * 
 * The default implementation of this interface is a wrapper around the HtmlUnit
 * WebClient object
 * 
 * @author temp_dmenes
 * 
 */
public interface InteractionContext<R extends InteractionResponse<R>>
{
  
  /**
   * Initialize the interaction context.
   * 
   * Context must be creatable with a public no-arg constructor. Use this
   * method to initialize with the interactive user.
   */
  void init (InteractiveUser<R> user);

  /**
   * Loads the index page for the {@code WebApplication}. Uses the default
   * timeout
   * 
   * As a side effect, sets the default {@code ConnectionFactory} for the
   * {@code InteractionContext} to the one returned by the
   * {@code WebApplication}
   * 
   * @param webApplication
   *          A web application
   * @return An InteractionResponse object
   * @throws Exception
   */
  R browse (WebApplication webApplication) throws Exception;

  /**
   * Loads the page at the provided path from the web application
   * 
   * The full URL will be calculated relative to the index URL of the
   * webApplication.
   * 
   * @param webApplication
   * @param path
   * @return An InteractionResponse object
   * @throws Exception
   */
  R browse (WebApplication webApplication, String path, long timeout) throws Exception;

  /**
   * Retrieves a cookie from the cookie store.
   * 
   * @param key
   * @return
   * @throws Exception
   */
  String getCookie (String key) throws Exception;

  /**
   * Send an arbitrary GET request. Uses the connection factory returned by the
   * last call to {@code browse}
   * 
   * Uses default timeout
   * 
   * @param url
   * @return
   * @throws Exception
   */
  R sendGetRequest (URL url) throws Exception;

  /**
   * Send an arbitrary GET request. Uses the connection factory returned by the
   * last call to {@code browse}
   * 
   * @param url
   * @return
   * @throws Exception
   */
  R sendGetRequest (URL url, long timeout) throws Exception;

  /**
   * Returns the user who owns this interaction context
   * 
   * @return
   */
  InteractiveUser<R> getInteractiveUser ();

  /**
   * Returns the last page returned by a call to
   * {@code InteractionResponse.expecting} in this interaction context.
   * 
   * @return The page
   */
  PageDriver<R> getCurrentPage ();

  /**
   * Returns the last page returned by a call to
   * {@code InteractionResponse.expecting} in this interaction context.
   * 
   * Alias for getCurrentPage()
   * 
   * @return The page
   */
  PageDriver<R> _ ();

  /**
   * Closes any outstanding resources used by this context, in preparation for
   * ending the test
   * 
   * @throws Exception
   */
  void shutdown () throws Exception;

  /**
   * Get the currently active timing record, or null if no active timing record
   * 
   * @return
   */
  InteractionTimingRecord getActiveTimingRecord ();

  /**
   * Create a new InteractionTimingRecord and make it active
   * 
   * @param interactionType
   *          Identify the general class of this interaction
   * @param description
   *          Will be used to describe this interaction in logs
   * @return The newly created InteractionTimingRecord
   */
  public InteractionTimingRecord startNewInteraction (String interactionType, String description);

  /**
   * Call succeed(message) on the active transaction, if any
   * 
   * @param message
   */
  public void succeedActiveInteraction (String message);

  /**
   * Call fail(message, cause) on the active transaction, if any
   * 
   * @param message
   * @param cause
   */
  public void failActiveInteraction (String message, Throwable cause);

  /**
   * History of InteractionTimingRecords, excluding any currently active record
   * 
   * @return Array of InteractionTimingRecords.
   */
  InteractionTimingRecord[] getTimingRecordHistory ();

  /**
   * Set a queue to which the timing records will be sent
   */
  public void setTimingRecordQueue (Queue<InteractionTimingRecord> queue);

  /**
   * INTERNAL API--DO NOT USE
   * 
   * Used by the InteractionTimingRecord to inactivate itself in response to its
   * fail() or succeed() method.
   * 
   * @param record
   */
  void inactivateTimingRecord (InteractionTimingRecord record);

  URL getBaseUrl ();
  
  void setDefaultTimeout( long t );
  
  long getDefaultTimeout();

}
