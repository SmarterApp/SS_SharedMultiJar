/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.cooperation;

import static org.junit.Assert.*;

import java.util.List;

import javax.annotation.Resource;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.shared.test.LifecycleManagingTestRunner;
import org.opentestsystem.shared.test.api.cooperation.CooperativeInteractiveUser;
import org.opentestsystem.shared.test.api.cooperation.Cue;
import org.opentestsysten.shared.test.userstory.AbstractFirstPersonUserStory;
import org.springframework.test.context.ContextConfiguration;

@RunWith (LifecycleManagingTestRunner.class)
@ContextConfiguration ("test-context.xml")
public class ChorusTests
{

  private static final String        MESSAGE        = "THIS IS A SECRET";

  @Resource (name = "talker")
  private CooperativeInteractiveUser talker;

  @Resource (name = "listener1")
  private CooperativeInteractiveUser listener1;

  @Resource (name = "listener2")
  private CooperativeInteractiveUser listener2;

  private final ListenerStory        listenerStory1 = new ListenerStory ();
  private final ListenerStory        listenerStory2 = new ListenerStory ();

  @Before
  public void setUp () {
    talker.setScript (new TalkerStory (MESSAGE));
    listener1.setScript (listenerStory1);
    listener2.setScript (listenerStory2);
  }

  @Test
  public void simpleSignallingTest () throws InterruptedException {
    listener1.startScript ();
    talker.startScript ();
    listener1.join ();
    assertTrue (String.format("Didn't take expected time (%d)", listenerStory1.latency)
        , listenerStory1.latency > 800 && listenerStory1.latency < 1200);
    assertEquals ("Didn't deliver correct message", MESSAGE, listenerStory1.message);
  }

  private class ListenerStory extends AbstractFirstPersonUserStory
  {

    public volatile String message = null;
    public volatile long   latency = 0;

    @Override
    public void run () throws Exception {
      long start = System.currentTimeMillis ();
      List<Cue> cues = I ().listenFor (new RegexCuePattern ("CUE"));
      assertEquals ("Wrong number of cues received", 1, cues.size ());
      latency = System.currentTimeMillis () - start;
      message = (String) cues.get(0).getData ();
    }

    @Override
    public String getScriptName () {
      return "Listener script";
    }
  }

  private class TalkerStory extends AbstractFirstPersonUserStory
  {
    public final String message;

    public TalkerStory (String message) {
      this.message = message;
    }

    @Override
    public void run () throws Exception {
      Thread.sleep (1000);
      Cue cue = new Cue ("CUE", message, true);
      I ().say (cue);
    }

    @Override
    public String getScriptName () {
      return "Talker script";
    }
  }
}
