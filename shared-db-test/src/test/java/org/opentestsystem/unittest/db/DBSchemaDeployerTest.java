/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.unittest.db;

import java.util.Date;
import java.util.Properties;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith (SpringJUnit4ClassRunner.class)
@ContextConfiguration (locations = "/test-context.xml")
public class DBSchemaDeployerTest
{
  @SuppressWarnings ("unused")
  private static final Logger   _logger                             = LoggerFactory.getLogger (DBSchemaDeployerTest.class);
  
  @Autowired
  private DBSchemaDeployerImpl configsSchema = null;
  
  @Autowired
  private DBSchemaDeployerImpl itembankSchema = null;
  
  @Autowired 
  private DBSchemaDeployerImpl archiveSchema = null;
  
  @Autowired
  private DBSchemaDeployerImpl sessionSchema = null;
  
  @Test 
  public void sessionDBTestConf () throws Exception{
    Date start = new Date();
    sessionSchema.startupBeforeDependencies ();
    sessionSchema.startupAfterDependencies ();
    Date end = new Date();
    long diffCreation = end.getTime () - start.getTime ();
    System.out.println (String.format ("Latency to create session db set: %d", diffCreation));
    
    sessionSchema.shutdownBeforeDependencies ();
    sessionSchema.shutdownAfterDependencies ();
  }
  
  @Test 
  public void configsDBTestConf () throws Exception{
    Date start = new Date();
    configsSchema.startupBeforeDependencies ();
    configsSchema.startupAfterDependencies ();
    Date end = new Date();
    long diffCreation = end.getTime () - start.getTime ();
    System.out.println (String.format ("Latency to create configs db set: %d", diffCreation));
    
    configsSchema.shutdownBeforeDependencies ();
    configsSchema.shutdownAfterDependencies ();
  }
  
  @Test 
  public void archiveDBTestConf () throws Exception{
    archiveSchema.startupBeforeDependencies ();
    archiveSchema.startupAfterDependencies ();
    
    archiveSchema.shutdownBeforeDependencies ();
    archiveSchema.shutdownAfterDependencies ();
  }
  
  @Test 
  public void itembankDBTestConf () throws Exception{
    Date start = new Date ();
    itembankSchema.startupBeforeDependencies ();
    itembankSchema.startupAfterDependencies ();
    Date end = new Date();
    long diffCreation = end.getTime () - start.getTime ();
    System.out.println (String.format ("Latency to create itembank db set: %d", diffCreation));
    
    itembankSchema.shutdownBeforeDependencies ();
    itembankSchema.shutdownAfterDependencies ();
  }
  
  @Test
  public void configsDBTest () throws Exception{
    DBSchemaDeployerImpl dbSchemaDepl = new DBSchemaDeployerImpl ();
    dbSchemaDepl.setDbDialect ("MYSQL");
    dbSchemaDepl.setSchemaDefinitionName ("configs");
    dbSchemaDepl.setDbName ("configs2012");
    dbSchemaDepl.setAdditionalUrlParm ("?useServerPrepStmts=false&amp;rewriteBatchedStatements=true");

    Properties props = new Properties ();

    props.setProperty ("jdbcUrl", "jdbc:mysql://127.0.0.1:3306");
    props.setProperty ("user", "root");
    props.setProperty ("password", "root");
    props.setProperty ("driverClass", "com.mysql.jdbc.Driver");

    dbSchemaDepl.setMasterDataSourceProperties (props);
    Date start = new Date ();
    dbSchemaDepl.startupBeforeDependencies ();

    dbSchemaDepl.startupAfterDependencies ();
    Date endCreation = new Date ();

    //dbSchemaDepl.shutdownBeforeDependencies ();

    //dbSchemaDepl.shutdownAfterDependneices ();

    long diffCreation = endCreation.getTime () - start.getTime ();
    System.out.println (String.format ("Latency to create configs db set: %d", diffCreation));

  }
}
