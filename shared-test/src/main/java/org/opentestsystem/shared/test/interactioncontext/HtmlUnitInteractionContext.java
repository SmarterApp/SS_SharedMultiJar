/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.interactioncontext;

import java.net.URL;

import org.opentestsystem.shared.test.api.InteractiveUser;
import org.opentestsystem.shared.test.api.WebApplication;
import org.opentestsystem.shared.test.pagedriver.HtmlUnitPageDriver;

import com.gargoylesoftware.htmlunit.BrowserVersion;
import com.gargoylesoftware.htmlunit.HttpMethod;
import com.gargoylesoftware.htmlunit.Page;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.WebClientOptions;
import com.gargoylesoftware.htmlunit.WebRequest;
import com.gargoylesoftware.htmlunit.javascript.DebuggerImpl;

/**
 * @author jmambo
 * @author Dan Menes <temp_dmenes@air.org>
 */
public class HtmlUnitInteractionContext extends AbstractInteractionContext<HtmlUnitInteractionResponse>
{

  private WebClient           _webClient = null;
  private HtmlUnitPageDriver  _currentPage;
  private URL                 _baseURL;
  
  public HtmlUnitInteractionContext () {
    super();
  }
  
  public void init (InteractiveUser<HtmlUnitInteractionResponse> interactiveUser) {
    super.init (interactiveUser);
    WebClient webClient = new WebClient (BrowserVersion.FIREFOX_24);
    // _webClient = new WebClient (BrowserVersion.INTERNET_EXPLORER_11);
    WebClientOptions options = webClient.getOptions ();
    options.setThrowExceptionOnFailingStatusCode (false);
    options.setJavaScriptEnabled (true);
    options.setCssEnabled (true);
    options.setJavaScriptEnabled (true);
    options.setPopupBlockerEnabled (false);
    options.setThrowExceptionOnFailingStatusCode (false);
    options.setThrowExceptionOnScriptError (false);

    // if (LoggerFactory.getLogger (DebugFrameImpl.class).isDebugEnabled ()) {
    webClient.getJavaScriptEngine ().getContextFactory ().setDebugger (new DebuggerImpl ());
    // }
    // _webClient.setAjaxController (new NicelyResynchronizingAjaxController
    // ());
    webClient.setPageCreator (new FrameworkPageCreator ());
    setWebClient (webClient);
  }

  @Override
  public HtmlUnitInteractionResponse browse (WebApplication webApplication, String path, long timeout) throws Exception {
    this.startNewInteraction ("BROWSE_INDEX", String.format ("Browse the index for web application %s", webApplication.getIndexUrl ()));
    String logRequests = (String) getInteractiveUser ().getConfigurationSource ().get ("org.opentestsystem.test.LogRequests");
    if (logRequests != null && logRequests.toLowerCase () != "false") {
      getWebClient ().setWebConnection (new InteractionLoggingWebConnection (this));
    }
    else {
      getWebClient ().setWebConnection (new TimingWebConnection (this));
    }
    _baseURL = webApplication.getIndexUrl ();
    URL targetURL = null;
    if (path == null) {
      targetURL = _baseURL;
    }
    else {
      targetURL = new URL (_baseURL, path);
    }
    return sendGetRequest (targetURL, timeout);
  }

  /**
   * Build a generic interaction response that is linked to the current
   * interaction context
   * 
   * @param response
   *          An HtmlUnit Page object containing the content for the response
   * @return The InteractionResponse object
   */
  public HtmlUnitInteractionResponse buildResponse (Page page, long timeout) {
    return new HtmlUnitInteractionResponse (this, page, timeout, System.currentTimeMillis () + timeout);
  }

  @Override
  public HtmlUnitPageDriver getCurrentPage () {
    return _currentPage;
  }
  
  void setCurrentPage(HtmlUnitPageDriver page) {
    _currentPage = page;
  }

  @Override
  public String getCookie (String key) {
    return _webClient.getCookieManager ().getCookie (key).getValue ();
  }

  @Override
  public HtmlUnitInteractionResponse sendGetRequest (URL url, long timeout) throws Exception {
    WebRequest request = new WebRequest (url, HttpMethod.GET);
    return sendRequest (request, timeout);
  }

  /**
   * Send an arbitrary HTTP request. Uses the connection factory returned by the
   * last call to {@code browse}
   * 
   * @param request
   * @return
   * @throws Exception
   */
  public HtmlUnitInteractionResponse sendRequest (WebRequest request, long timeout) throws Exception {
    long t_timeout = System.currentTimeMillis () + timeout;
    Page page = _webClient.getPage (request);
    return new HtmlUnitInteractionResponse (this, page, timeout, t_timeout);
  }

  @Override
  public void shutdown () {
    if (_webClient != null) {
      _webClient.closeAllWindows ();
    }
    _webClient = null;
  }

  public WebClient getWebClient () {
    return _webClient;
  }

  protected void setWebClient (WebClient client) {
    _webClient = client;
  }

  @Override
  public URL getBaseUrl () {
    return _baseURL;
  }

}
