/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.api.cooperation;

import java.util.List;
import java.util.Map;
import java.util.Queue;

public interface Stage extends Map<String,CooperativeInteractiveUser<?,?>>
{

  /**
   * Publish a cue to all threads currently listening
   * 
   * If the cue has retained==true, then the cue will be retained in a private
   * collection to be returned by future calls to {@link #getCurrentCues} or
   * {@link #listenForCues}.
   * 
   * @param cue
   *          Cue to be published.
   */
  public void sayCue (Cue cue);

  /**
   * Return any retained cues that match the pattern. If no retained cues match
   * the pattern, then wait until at least one cue is submitted that matches the
   * pattern.
   * 
   * @param pattern
   * @return list of matching cues
   * @throws InterruptedException
   */
  public List<Cue> listenForCues (CuePattern pattern) throws InterruptedException;

  /**
   * Return any retained cues that match the pattern. If no retained cues match
   * the pattern, return an empty list.
   * 
   * @param pattern
   * @return list of matching cues
   */
  public List<Cue> getCurrentCues (CuePattern pattern) ;
  
  /**
   * Register an asynchronous callback for cues
   * @param pattern
   * @param callback
   */
  public void registerCueCallback(CuePattern pattern, CueCallback callback) ;
  
  /**
   * Remove a previously registered asynchronous callback for cues
   * @param pattern
   * @param callback
   */
  public void unregisterCueCallback(CuePattern pattern, CueCallback callback);
  
  /**
   * Remove retained cues matching pattern
   * 
   */
  public void forgetRetainedCues(CuePattern pattern) ;
  
  /**
   * Register a java.util.Queue object that will receive all cues matching the cue pattern.
   * 
   * Note that, if the queue that you register does not accept the Cue, the Cue
   * will be dropped with only a warning written to the log.
   */
  
  public void registerListeningQueue(CuePattern pattern, Queue<Cue> queue) ;
  
  /**
   * Remove a queue that was previously registered to receive cues.
   * @param pattern
   * @param queue
   */
  public void unregisterListeningQueue(CuePattern pattern, Queue<Cue> queue) ;
  
}
