/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.api;

/**
 * A response, which can be rendered to a PageDriver via the {@code expecting}
 * method
 * 
 * @author temp_dmenes
 * 
 */
public interface InteractionResponse<R extends InteractionResponse<R>>
{
  /**
   * Generate a PageDriver of the expected type from the response data, or
   * throw error
   * 
   * Will throw an error if the specified page type has not loaded within 30 seconds.
   * 
   * Creates a new object of type T, and calls init( client, page, context, true, 30000 )
   * on the new instance.
   * 
   * @param pageType
   * @return
   * @throws Exception
   * @throws Throwable
   */
  <T extends PageDriver<R>> T expecting (Class<T> pageType) throws Throwable;

  /**
   * Generate a PageDriver of the expected type from the response data.
   * 
   * Creates a new object of type T, and calls init( client, page, context, ensureLoaded, timeoutMillis )
   * on the new instance.
   *  
   */
  <T extends PageDriver<R>> T expecting (Class<T> pageType, boolean ensureLoaded) throws Throwable;
  
  /**
   * Returns the interaction context associates with this InteractionResponse
   * @return
   */
  InteractionContext<R> getInteractionContext();
  
  /**
   * Get the time allowed for loading of the response.
   * 
   * This value is relevant when there are parts that are loaded asynchronously
   * and may complete after the creation of the InteractionResponse object
   * @return the total time allowed
   */
  long getTimeout();
  
  /**
   * Get the time (milliseconds after epoch) at which the timeout will lapse.
   * 
   * This value is relevant when there are parts that are loaded asynchronously
   * and may complete after the creation of the InteractionResponse object
   * @return The absolute time when the timeout expires
   */
  long getTimeoutTime();
  
  /**
   * Test whether the time allowed for asynchronous loading has expired.
   * 
   * This value is relevant when there are parts that are loaded asynchronously
   * and may complete after the creation of the InteractionResponse object
   * @return System.currentTimeMillis() > getTimeoutTime()
   */
  boolean isTimedOut();
}
