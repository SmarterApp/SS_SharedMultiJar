/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.listener;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.opentestsystem.shared.test.api.LifecycleResource;
import org.opentestsystem.shared.test.util.LifecycleResourceExecutor;
import org.opentestsystem.shared.test.util.LifecycleResourceMethods;
import org.opentestsystem.shared.test.util.LifecycleTestMethodCounter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.test.context.TestContext;
import org.springframework.test.context.TestExecutionListener;

/**
 * @author mpatel
 *
 */
public class LifecycleTestExecutionListener implements TestExecutionListener
{

  private static final Logger _logger = LoggerFactory.getLogger (LifecycleTestExecutionListener.class);
  /* (non-Javadoc)
   * @see org.springframework.test.context.TestExecutionListener#beforeTestClass(org.springframework.test.context.TestContext)
   */
  public void beforeTestClass (TestContext testContext) throws Exception {
     //System.out.println ("beforeTestClass....");
    
  }

  /* (non-Javadoc)
   * @see org.springframework.test.context.TestExecutionListener#prepareTestInstance(org.springframework.test.context.TestContext)
   */
  public void prepareTestInstance (TestContext testContext) throws Exception {
    //System.out.println ("prepareTestInstance....");
    
  }

  /* (non-Javadoc)
   * @see org.springframework.test.context.TestExecutionListener#beforeTestMethod(org.springframework.test.context.TestContext)
   */
  public void beforeTestMethod (TestContext testContext) throws Exception {
     _logger.debug ("\n\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<beforeTestMethod : start>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
     ApplicationContext context = testContext.getApplicationContext ();
     int counter = -1;
     if(context.getBean (LifecycleTestMethodCounter.class)!=null) {
      LifecycleTestMethodCounter  lifecycleTestMethodCounter= (LifecycleTestMethodCounter)context.getBean (LifecycleTestMethodCounter.class);
      counter = lifecycleTestMethodCounter.getTestMethodCounter ();
      lifecycleTestMethodCounter.addTestMethodCounter ();
     }
     if(counter!=0) {
       Map<String, LifecycleResource> lifeCycleBeansMap = context.getBeansOfType (LifecycleResource.class);

       if (lifeCycleBeansMap != null && !lifeCycleBeansMap.isEmpty ()) {
         List<String> lifeCycleResourcesName = new ArrayList<String> (lifeCycleBeansMap.keySet ());
         List<LifecycleResource> afterMethodExecutionList = new ArrayList<LifecycleResource> ();
         LifecycleResourceExecutor lifecycleResourceExecutor = context.getBean (LifecycleResourceExecutor.class);
         lifecycleResourceExecutor.executeLifeCycleResourceBeforeDependencies (lifeCycleResourcesName, context, afterMethodExecutionList, LifecycleResourceMethods.betweenTestsBeforeDependencies);
         
         for(int i=afterMethodExecutionList.size ()-1;i>=0;i--) {
           afterMethodExecutionList.get (i).betweenTestsAfterDependencies ();
         }
       }
     }
     _logger.debug ("<<<<<<<<<<<<<<<<<<<<<<<<<<<<beforeTestMethod : end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n");
    
  }

  /* (non-Javadoc)
   * @see org.springframework.test.context.TestExecutionListener#afterTestMethod(org.springframework.test.context.TestContext)
   */
  public void afterTestMethod (TestContext testContext) throws Exception {
    _logger.debug ("\n\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<afterTestMethod : start>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
    ApplicationContext context = testContext.getApplicationContext ();
    Map<String, LifecycleResource> lifeCycleBeansMap = context.getBeansOfType (LifecycleResource.class);

    if (lifeCycleBeansMap != null && !lifeCycleBeansMap.isEmpty ()) {
      List<String> lifeCycleResourcesName = new ArrayList<String> (lifeCycleBeansMap.keySet ());
      List<LifecycleResource> afterMethodExecutionList = new ArrayList<LifecycleResource> ();
      LifecycleResourceExecutor lifecycleResourceExecutor = context.getBean (LifecycleResourceExecutor.class);
      lifecycleResourceExecutor.executeLifeCycleResourceBeforeDependencies (lifeCycleResourcesName, context, afterMethodExecutionList, LifecycleResourceMethods.afterTestBeforeDependencies);
      
      for(int i=afterMethodExecutionList.size ()-1;i>=0;i--) {
        afterMethodExecutionList.get (i).afterTestAfterDependencies ();
      }
    }
    _logger.debug ("<<<<<<<<<<<<<<<<<<<<<<<<<<<<afterTestMethod : end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n");
  }

  /* (non-Javadoc)
   * @see org.springframework.test.context.TestExecutionListener#afterTestClass(org.springframework.test.context.TestContext)
   */
  public void afterTestClass (TestContext testContext) throws Exception {
//     //System.out.println ("afterTestClass....");
    
  }

}
