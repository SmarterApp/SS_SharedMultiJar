/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.listener;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.opentestsystem.shared.test.api.LifecycleResource;
import org.opentestsystem.shared.test.util.LifecycleResourceExecutor;
import org.opentestsystem.shared.test.util.LifecycleResourceMethods;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;

/**
 * @author mpatel
 * 
 */
public class LifecycleTestApplicationContextRefreshEventListener implements ApplicationListener<ContextRefreshedEvent>
{
  private static final Logger _logger = LoggerFactory.getLogger (LifecycleTestApplicationContextRefreshEventListener.class);

  /*
   * (non-Javadoc)
   * 
   * @see
   * org.springframework.context.ApplicationListener#onApplicationEvent(org.
   * springframework.context.ApplicationEvent)
   */

  public void onApplicationEvent (ContextRefreshedEvent event) {
    _logger.debug ("\n\n======================================Inside onApplicationEvent : ContextRefreshedEvent : start======================================");
    try {
      ApplicationContext context = event.getApplicationContext ();
      Map<String, LifecycleResource> lifeCycleBeansMap = context.getBeansOfType (LifecycleResource.class);

      if (lifeCycleBeansMap != null && !lifeCycleBeansMap.isEmpty ()) {
        List<String> lifeCycleResourcesName = new ArrayList<String> (lifeCycleBeansMap.keySet ());
        List<LifecycleResource> afterMethodExecutionList = new ArrayList<LifecycleResource> ();
        LifecycleResourceExecutor lifecycleResourceExecutor = context.getBean (LifecycleResourceExecutor.class);
        lifecycleResourceExecutor.executeLifeCycleResourceBeforeDependencies (lifeCycleResourcesName, context, afterMethodExecutionList, LifecycleResourceMethods.startupBeforeDependencies);

        for (int i = afterMethodExecutionList.size () - 1; i >= 0; i--) {
          afterMethodExecutionList.get (i).startupAfterDependencies ();
        }
      }

    } catch (Exception e) {
      throw new RuntimeException ("Error while initializing test lifecycle resources", e);
    }
    _logger.debug ("======================================Inside onApplicationEvent : ContextRefreshedEvent : end======================================\n\n");

  }

}
