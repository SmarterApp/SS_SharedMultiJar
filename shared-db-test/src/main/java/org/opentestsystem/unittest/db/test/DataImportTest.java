/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.unittest.db.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.sql.PreparedStatement;
import java.sql.ResultSet;

import javax.xml.bind.DatatypeConverter;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.unittest.db.DBDataDeployerImpl;
import org.opentestsystem.unittest.db.DBSchemaDeployerImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import AIR.Common.DB.RollbackConnectionManager;
import AIR.Common.DB.SQLConnection;

@RunWith (SpringJUnit4ClassRunner.class)
@ContextConfiguration (locations = "/test-context-data-deployer.xml")
public class DataImportTest
{

  @Autowired
  private DBSchemaDeployerImpl      sessionSchema      = null;

  @Autowired
  private DBDataDeployerImpl        sessionData        = null;

  @Autowired
  @Qualifier ("sessionConnectionManager")
  private RollbackConnectionManager _connectionManager = null;

  @Test
  public void testImport () throws Exception {
    sessionSchema.startupBeforeDependencies ();
    sessionData.startupBeforeDependencies ();

    sessionData.startupAfterDependencies ();
    sessionSchema.startupAfterDependencies ();

    try (SQLConnection con = _connectionManager.getConnection ()) {
      final String SQL_QUERY_SELECT = "SELECT _efk_testee, _efk_testid, opportunity, _fk_session, testeeid, datechanged, daterestarted FROM " + sessionSchema.getDbName () + ".testopportunity";
      try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
        assertTrue (st.execute ());
        try (ResultSet rs = st.getResultSet ()) {
          assertTrue (rs.next ());
          System.out.println ("testeeid: " + rs.getString ("testeeid"));
          assertEquals (rs.getString ("testeeid"), "9999999712");
          byte[] rt1 = rs.getBytes ("_fk_session");
          assertNotNull (rt1);
          String rtStr1 = DatatypeConverter.printHexBinary (rt1);
          String uuidStr1 = String.format ("%s-%s-%s-%s-%s", rtStr1.substring (0, 8), rtStr1.substring (8, 12), rtStr1.substring (12, 16),
              rtStr1.substring (16, 20), rtStr1.substring (20));
          System.out.println ("_fk_session: " + uuidStr1);
          assertEquals (uuidStr1, "1A29F8CF-8187-4FD8-9088-4E6D38F19074");
          System.out.println (rs.getTimestamp ("datechanged"));
//          assertEquals (rs.getTimestamp ("datechanged").getTime (), 1353806623000L);

          assertTrue (rs.next ());
          System.out.println ("testeeid: " + rs.getString ("testeeid"));
          assertEquals (rs.getString ("testeeid"), "9999999616");
          byte[] rt2 = rs.getBytes ("_fk_session");
          assertNotNull (rt2);
          String rtStr2 = DatatypeConverter.printHexBinary (rt2);
          String uuidStr2 = String.format ("%s-%s-%s-%s-%s", rtStr2.substring (0, 8), rtStr2.substring (8, 12), rtStr2.substring (12, 16),
              rtStr2.substring (16, 20), rtStr2.substring (20));
          System.out.println ("_fk_session: " + uuidStr2);
          assertEquals (uuidStr2, "886C3426-5874-4412-AD3C-05A685FB54BE");
          System.out.println (rs.getTimestamp ("datechanged"));
//          assertEquals (rs.getTimestamp ("datechanged").getTime (), 1354906776000L);
        }
      }
//
//      final String SQL_QUERY_SELECT2 = "SELECT _key, datecreated, package FROM " + sessionSchema.getDbName () + ".r_studentpackage";
//      try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT2)) {
//        assertTrue (st.execute ());
//        try (ResultSet rs = st.getResultSet ()) {
//          assertTrue (rs.next ());
//          System.out.println ("_key: " + rs.getBigDecimal ("_key"));
//          byte[] rt = rs.getBytes ("package");
//          assertNotNull (rt);
//          String rtStr = DatatypeConverter.printHexBinary (rt);
//          System.out.println ("package: " + rtStr);
//          assertTrue (rtStr.startsWith ("1F8B0800000000000000ED57CD6F1B45141FDB496AE7AB6E5A5A0A8A88D45EFDD1844"));
//        }
//      }
    }
  }
}
