/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.unittest.db.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.unittest.db.DBDataDeployerImpl;
import org.opentestsystem.unittest.db.DBSchemaDeployerImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import AIR.Common.DB.RollbackConnectionManager;
import AIR.Common.DB.SQLConnection;

@RunWith (SpringJUnit4ClassRunner.class)
@ContextConfiguration (locations = "/test-context-data-deployer.xml") 
public class RollbackConnectionTest {

	@Autowired
	private DBSchemaDeployerImpl configsSchema = null;
	
	@Autowired
	private DBDataDeployerImpl configsData = null;
	
	@Autowired
	@Qualifier("configsConnectionManager")
	private RollbackConnectionManager _connectionManager = null;

	private void deployData() throws Exception {
		configsSchema.startupBeforeDependencies ();		
		configsData.startupBeforeDependencies();

		configsData.startupAfterDependencies();
		configsSchema.startupAfterDependencies ();
	}
	
	private void testRollback () throws Exception {
		try (SQLConnection con = _connectionManager.getConnection ()) {
		    final String SQL_QUERY_SELECT = "select name from "+configsSchema.getDbName()+".client where name like 'AIR%';";
		    try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
		    	assertTrue(st.execute ());
		    	try (ResultSet rs = st.getResultSet()) {
		    		assertTrue(rs.next());
		    		assertEquals(rs.getString("name"), "AIR");
		    	}
		    } 
		}
	}
	
	
	
	@Test
	public void testDataModified () throws Exception {
		deployData();
		
		try (SQLConnection con = _connectionManager.getConnection ()) {
		    final String SQL_QUERY_SELECT = "select name from "+configsSchema.getDbName()+".client where name like 'AIR%';";
		    try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
		    	assertTrue(st.execute ());
		    	try (ResultSet rs = st.getResultSet()) {
		    		assertTrue(rs.next());
		    		assertEquals(rs.getString("name"), "AIR");
		    	}
		    } 
			
			final String SQL_QUERY_UPDATE = "update "+configsSchema.getDbName()+".client set name='AIR2012' where name='AIR';";
		    try (PreparedStatement st = con.prepareStatement (SQL_QUERY_UPDATE)) {
		    	st.execute ();		      
		    } 
		    
			try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
		    	assertTrue(st.execute ());
		    	try (ResultSet rs = st.getResultSet()) {
		    		assertTrue(rs.next());
		    		assertEquals(rs.getString("name"), "AIR2012");
		    	}
		    } 

		}
		
		testRollback();
	}
	
	@Test
	public void testNestedTransactionCommit () throws Exception {	    		
		deployData();
		
		try (SQLConnection con = _connectionManager.getConnection ()) {
		    final String SQL_QUERY_SELECT = "select name from "+configsSchema.getDbName()+".client where name like 'AIR%';";
		    try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
		    	assertTrue(st.execute ());
		    	try (ResultSet rs = st.getResultSet()) {
		    		assertTrue(rs.next());
		    		assertEquals(rs.getString("name"), "AIR");
		    	}
		    } 
			
		    boolean commitMode = con.getAutoCommit();
		    con.setAutoCommit(false);
		    
			final String SQL_QUERY_UPDATE = "update "+configsSchema.getDbName()+".client set name='AIR2012' where name='AIR';";
		    try (PreparedStatement st = con.prepareStatement (SQL_QUERY_UPDATE)) {
		    	st.execute ();		      
		    } 
		    
		    try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
		    	assertTrue(st.execute ());
		    	try (ResultSet rs = st.getResultSet()) {
		    		assertTrue(rs.next());
		    		assertEquals(rs.getString("name"), "AIR2012");
		    	}
		    } 
		    
		    con.commit();
		    con.setAutoCommit(commitMode);
		    
			try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
		    	assertTrue(st.execute ());
		    	try (ResultSet rs = st.getResultSet()) {
		    		assertTrue(rs.next());
		    		assertEquals(rs.getString("name"), "AIR2012");
		    	}
		    } 

		}
		
		testRollback();
	}

	@Test
	public void testNestedTransactionRollback () throws Exception {
		deployData();
		
		try (SQLConnection con = _connectionManager.getConnection ()) {
		    final String SQL_QUERY_SELECT = "select name from "+configsSchema.getDbName()+".client where name like 'AIR%';";
		    try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
		    	assertTrue(st.execute ());
		    	try (ResultSet rs = st.getResultSet()) {
		    		assertTrue(rs.next());
		    		assertEquals(rs.getString("name"), "AIR");
		    	}
		    } 
		    
		    boolean commitMode = con.getAutoCommit();			
		    con.setAutoCommit(false);
		    
			final String SQL_QUERY_UPDATE = "update "+configsSchema.getDbName()+".client set name='AIR2012' where name='AIR';";
		    try (PreparedStatement st = con.prepareStatement (SQL_QUERY_UPDATE)) {
		    	st.execute ();		      
		    } 
		    
		    con.rollback();
		    con.setAutoCommit(commitMode);
		    
			try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
		    	assertTrue(st.execute ());
		    	try (ResultSet rs = st.getResultSet()) {
		    		assertTrue(rs.next());
		    		assertEquals(rs.getString("name"), "AIR");
		    	}
		    } 
		}
		
		testRollback();
	}

	@Test
	public void testExceptionPropagation () throws Exception {
		deployData();

	    try {
	    	try (SQLConnection con = _connectionManager.getConnection ()) {
	    		final String SQL_QUERY_SELECT = "select name from "+configsSchema.getDbName()+".client where name like 'AIR%';";
	    		try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
	    			assertTrue(st.execute ());
	    			try (ResultSet rs = st.getResultSet()) {
	    				assertTrue(rs.next());
	    				assertEquals(rs.getString("name"), "AIR");
	    			}
	    		} 

	    		final String SQL_QUERY_UPDATE = "update "+configsSchema.getDbName()+".client set name='AIR2012' where name='AIR';";
	    		try (PreparedStatement st = con.prepareStatement (SQL_QUERY_UPDATE)) {
	    			st.execute ();		      
	    		} 

	    		throw new SQLException("Test");
	    	}
	    }
	    catch (SQLException exp) {
	    	assertEquals(exp.getMessage(), "Test");
	    }
		
	    testRollback();
	}

	@Test
	public void testNestedTransactionExceptionPropagation () throws Exception {
		deployData();

	    try {
	    	try (SQLConnection con = _connectionManager.getConnection ()) {
	    		final String SQL_QUERY_SELECT = "select name from "+configsSchema.getDbName()+".client where name like 'AIR%';";
	    		try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
	    			assertTrue(st.execute ());
	    			try (ResultSet rs = st.getResultSet()) {
	    				assertTrue(rs.next());
	    				assertEquals(rs.getString("name"), "AIR");
	    			}
	    		} 

	    		con.setAutoCommit(false);
	    		
	    		final String SQL_QUERY_UPDATE = "update "+configsSchema.getDbName()+".client set name='AIR2012' where name='AIR';";
	    		try (PreparedStatement st = con.prepareStatement (SQL_QUERY_UPDATE)) {
	    			st.execute ();		      
	    		} 

	    		throw new SQLException("Test");
	    	
	    	}
	    }
	    catch (SQLException exp) {
	    	assertEquals(exp.getMessage(), "Test");
	    }
		
	    testRollback();
	}
	
	@Test
	public void testTwoNestedTransactionsCommit () throws Exception {
		deployData();
	    		
		try (SQLConnection con = _connectionManager.getConnection ()) {
		    final String SQL_QUERY_SELECT = "select name from "+configsSchema.getDbName()+".client where name like 'AIR%';";
		    try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
		    	assertTrue(st.execute ());
		    	try (ResultSet rs = st.getResultSet()) {
		    		assertTrue(rs.next());
		    		assertEquals(rs.getString("name"), "AIR");
		    	}
		    } 
			
		    boolean commitMode = con.getAutoCommit();
		    con.setAutoCommit(false);
		    
			final String SQL_QUERY_UPDATE = "update "+configsSchema.getDbName()+".client set name='AIR2012' where name='AIR';";
		    try (PreparedStatement st = con.prepareStatement (SQL_QUERY_UPDATE)) {
		    	st.execute ();		      
		    } 
		    
		    try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
		    	assertTrue(st.execute ());
		    	try (ResultSet rs = st.getResultSet()) {
		    		assertTrue(rs.next());
		    		assertEquals(rs.getString("name"), "AIR2012");
		    	}
		    } 
		    
		    con.commit();
		    con.setAutoCommit(commitMode);
		    
			try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
		    	assertTrue(st.execute ());
		    	try (ResultSet rs = st.getResultSet()) {
		    		assertTrue(rs.next());
		    		assertEquals(rs.getString("name"), "AIR2012");
		    	}
		    } 
			
			commitMode = con.getAutoCommit();			
			con.setAutoCommit(false);

			final String SQL_QUERY_UPDATE2 = "update "+configsSchema.getDbName()+".client set name='AIR2013' where name='AIR2012';";
			try (PreparedStatement st = con.prepareStatement (SQL_QUERY_UPDATE2)) {
				st.execute ();		      
			} 

			try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
				assertTrue(st.execute ());
				try (ResultSet rs = st.getResultSet()) {
					assertTrue(rs.next());
					assertEquals(rs.getString("name"), "AIR2013");
				}
			} 

			con.commit();
			con.setAutoCommit(commitMode);

			try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
				assertTrue(st.execute ());
				try (ResultSet rs = st.getResultSet()) {
					assertTrue(rs.next());
					assertEquals(rs.getString("name"), "AIR2013");
				}
			} 

		}
		
		testRollback();
	}
	
	@Test
	public void testTwoNestedTransactionsRollback () throws Exception {
		deployData();
	    		
		try (SQLConnection con = _connectionManager.getConnection ()) {
		    final String SQL_QUERY_SELECT = "select name from "+configsSchema.getDbName()+".client where name like 'AIR%';";
		    try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
		    	assertTrue(st.execute ());
		    	try (ResultSet rs = st.getResultSet()) {
		    		assertTrue(rs.next());
		    		assertEquals(rs.getString("name"), "AIR");
		    	}
		    } 
			
		    boolean commitMode = con.getAutoCommit();
		    con.setAutoCommit(false);
		    
			final String SQL_QUERY_UPDATE = "update "+configsSchema.getDbName()+".client set name='AIR2012' where name='AIR';";
		    try (PreparedStatement st = con.prepareStatement (SQL_QUERY_UPDATE)) {
		    	st.execute ();		      
		    } 
		    
		    try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
		    	assertTrue(st.execute ());
		    	try (ResultSet rs = st.getResultSet()) {
		    		assertTrue(rs.next());
		    		assertEquals(rs.getString("name"), "AIR2012");
		    	}
		    } 
			
			commitMode = con.getAutoCommit();			
			con.setAutoCommit(false);

			final String SQL_QUERY_UPDATE2 = "update "+configsSchema.getDbName()+".client set name='AIR2013' where name='AIR2012';";
			try (PreparedStatement st = con.prepareStatement (SQL_QUERY_UPDATE2)) {
				st.execute ();		      
			} 

			try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
				assertTrue(st.execute ());
				try (ResultSet rs = st.getResultSet()) {
					assertTrue(rs.next());
					assertEquals(rs.getString("name"), "AIR2013");
				}
			} 

			con.commit();
			con.setAutoCommit(commitMode);

			try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
				assertTrue(st.execute ());
				try (ResultSet rs = st.getResultSet()) {
					assertTrue(rs.next());
					assertEquals(rs.getString("name"), "AIR2013");
				}
			} 

			con.rollback();
			con.setAutoCommit(commitMode);
			
			try (PreparedStatement st = con.prepareStatement (SQL_QUERY_SELECT)) {
				assertTrue(st.execute ());
				try (ResultSet rs = st.getResultSet()) {
					assertTrue(rs.next());
					assertEquals(rs.getString("name"), "AIR");
				}
			} 
		}
		
		testRollback();
	}
}
	
