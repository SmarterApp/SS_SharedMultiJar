/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.test.cooperation;

import java.util.List;

import org.opentestsystem.shared.test.api.InteractionResponse;
import org.opentestsystem.shared.test.api.cooperation.CooperativeInteractiveUser;
import org.opentestsystem.shared.test.api.cooperation.Cue;
import org.opentestsystem.shared.test.api.cooperation.CuePattern;
import org.opentestsystem.shared.test.api.cooperation.LifecycleEventCue;
import org.opentestsystem.shared.test.api.cooperation.LifecycleEventCue.EventType;
import org.opentestsystem.shared.test.api.cooperation.Stage;
import org.opentestsystem.shared.test.api.userstory.FirstPersonUserStory;
import org.opentestsystem.shared.test.interactiveuser.FirstPersonInteractiveUserImpl;
import org.springframework.beans.factory.annotation.Autowired;

public class CooperativeInteractiveUserImpl<R extends InteractionResponse<R>, U extends CooperativeInteractiveUser<R, U>>
    extends FirstPersonInteractiveUserImpl<R, U>
    implements CooperativeInteractiveUser<R, U>
{
  private Stage _stage;

  public CooperativeInteractiveUserImpl () {
    this ("CooperativeInteractiveUser");
  }

  public CooperativeInteractiveUserImpl (String base) {
    super (base);
  }

  @Autowired
  @Override
  public synchronized void setStage (Stage stage) {
    if (_stage != null) {
      say (new LifecycleEventCue (this, EventType.LEFT_STAGE));
      _stage.remove (getName ());
    }
    _stage = stage;
    _stage.put (getName (), this);
    say (new LifecycleEventCue (this, EventType.JOINED_STAGE));
  }

  @Override
  public Stage getStage () {
    return _stage;
  }

  @Override
  public void say (Cue cue) {
    _stage.sayCue (cue);
  }

  @Override
  public List<Cue> listenFor (CuePattern pattern) throws InterruptedException {
    return _stage.listenForCues (pattern);
  }

  @Override
  protected void notifyScriptStart (Thread thread, FirstPersonUserStory<U> script) {
    say (new LifecycleEventCue (this, EventType.STARTED_SCRIPT, script.getScriptName (), thread.getName ()));
  }

  @Override
  protected void notifyScriptComplete (Thread thread, FirstPersonUserStory<U> script) {
    say (new LifecycleEventCue (this, EventType.COMPLETED_SCRIPT, script.getScriptName (), thread.getName ()));
  }

  @Override
  protected void notifyScriptError (Thread thread, FirstPersonUserStory<U> script, Throwable t) {
    say (new LifecycleEventCue (this, EventType.SCRIPT_ERROR, script.getScriptName (), thread.getName (), t));
  }

}
